(window.webpackJsonp=window.webpackJsonp||[]).push([[797],{2931:function(t,s,e){"use strict";e.r(s);var a=e(46),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("git的存储功能")])]),t._v(" "),e("p",[t._v("开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，犹豫分支是如此强大，所以，每个分支都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。")]),t._v(" "),e("p",[t._v("当你接到一个修复一个代号101的bug的任务时，很自然的，你想创建一个分支issue-101来修复它， 但是等等，当前正在dev上进行的工作还没提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git status\n# On branch dev\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n#       new file:   hello.py\n#\n# Changes not staged for commit:\n#   (use "git add <file>..." to update what will be committed)\n#   (use "git checkout -- <file>..." to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\n\n')])])]),e("p",[t._v("并不是你不想提交，而是工作只进行到一半，还没发提交，预计完成需1天事件。但是必须在两个小时内修复改bug 怎么办？")]),t._v(" "),e("p",[t._v("Git还提供了一个stash功能，可以把当前工作现场储藏起来，等你恢复现场后继续工作")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash\nSaved working directory and index state WIP on dev: 6224937 add merge\nHEAD is now at 6224937 add merge\n")])])]),e("p",[t._v("现在，用git status查看工作去，就是干净的(除非有没有被Git管理的文件)，因此可以放心的创建分支来修复bug。")]),t._v(" "),e("p",[t._v("首先确定要在哪个分支上修复bug,假定需要在master分支上修复，就从master创建临时分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 6 commits.\n$ git checkout -b issue-101\nSwitched to a new branch 'issue-101'\n")])])]),e("p",[t._v("现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git add readme.txt \n$ git commit -m "fix bug 101"\n[issue-101 cc17032] fix bug 101\n 1 file changed, 1 insertion(+), 1 deletion\n')])])]),e("p",[t._v("修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 2 commits.\n$ git merge --no-ff -m \"merged bug fix 101\" issue-101\nMerge made by the 'recursive' strategy.\n readme.txt |    2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git branch -d issue-101\nDeleted branch issue-101 (was cc17032).\n")])])]),e("p",[t._v("太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n$ git checkout dev\nSwitched to branch 'dev'\n$ git status\n# On branch dev\nnothing to commit (working directory clean)\n")])])]),e("p",[t._v("工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash list\nstash@{0}: WIP on dev: 6224937 add merge\n")])])]),e("p",[t._v("工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：")]),t._v(" "),e("p",[e("span",{staticStyle:{color:"red"}},[e("strong",[t._v("一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；")])])]),t._v(" "),e("p",[e("span",{staticStyle:{color:"red"}},[e("strong",[t._v("另一种方式是用git stash pop，恢复的同时把stash内容也删了：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git stash pop\n# On branch dev\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n#       new file:   hello.py\n#\n# Changes not staged for commit:\n#   (use "git add <file>..." to update what will be committed)\n#   (use "git checkout -- <file>..." to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\nDropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40\n')])])]),e("p",[t._v("再用git stash list查看，就看不到任何stash内容了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash list\n")])])]),e("p",[t._v("你可以多次stash，回复的时候，先用git stash list查看，然后回复指定的stash 用命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash apply stash@{0}\n")])])]),e("p",[t._v("修复bug时，我们会通过创建新的bug分支来进行修复，然后合并，最后删除;\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，在git stash pop，回到工作现场")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂存状态")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看缓存列表")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空你所有的内容")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop stash@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这是删除第一个队列 ")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);