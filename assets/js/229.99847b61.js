(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{1361:function(t,s,a){t.exports=a.p+"assets/img/111b0d76a96d4edbb1de9e41c09f4814_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.b976b8fa.png"},1362:function(t,s,a){t.exports=a.p+"assets/img/b6215e05e24e47e79e88fe13a7586d85_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.ec06d26e.png"},2594:function(t,s,a){"use strict";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),n("p",[t._v("网页开发时,不管是在移动端，还是PC端，都有个很重要的概念，叫做动态懒加载，适用于一些图片资源(或数据)特别多的场景，这时候，我们常常需要了解某个元素是否进入了『视口』(viewport)，即用户能不能看到它")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[t._v("传统的实现方法是，监听到scroll事件或使用setInterval来判断，调用目标元素的getBoundingClientRect()方法，得到它对应于视口左上角的坐标。这种方法的缺点是,由于scroll事件触发频率高，计算量很大，如果不做防抖节流的话，很容易造成性能问题，而setInterval由于其有间歇期，也会出现体验问题")])]),t._v(" "),n("p",[t._v("所以在几年前，Chrome率先提供了一个新的API，"),n("span",{staticStyle:{color:"red"}},[n("strong",[t._v('就是IntersectionObserver,它可以用来自动监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断。由于可见(visible)的本质是，目标元素与视口产生了一个交叉区，所以这个这个API叫做"交叉观察期"')])])]),t._v(" "),n("h2",{attrs:{id:"兼容性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#兼容性"}},[t._v("#")]),t._v(" 兼容性")]),t._v(" "),n("p",[t._v("由于这个api问世已经很多年了，所以对浏览器的支持性还是不错的，完全可以上生产环境，"),n("a",{attrs:{href:"http://caniuse.com/#search=IntersectionObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击这里"),n("OutboundLink")],1),t._v("可以看看当前浏览器对于IntersectionObserver的支持性：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1361),alt:"兼容性"}})]),t._v(" "),n("h2",{attrs:{id:"用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),n("p",[t._v("该API的调用非常简单")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" io "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("上面代码中,IntersectionObserver是浏览器原生提供的构造函数，接受两个参数")]),t._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"red"}},[t._v("callback:可见性发生变化时的回调函数")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("option:配置对象(可选)")])])]),t._v(" "),n("p",[t._v("构造函数的返回值是一个观察器实例。实例一共有4个方法：")]),t._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"red"}},[t._v("observe: 开始监听特定元素")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("unobserve: 停止监听特定元素")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("disconnect: 关闭监听工作")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("takeRecords: 返回所有观察目标的对象数组")])])]),t._v(" "),n("h3",{attrs:{id:"observe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#observe"}},[t._v("#")]),t._v(" observe")]),t._v(" "),n("p",[t._v("该方法需要接收一个target参数，值是Element类型,用来指定被监听的目标元素")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取元素")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始观察")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"unobserve"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unobserve"}},[t._v("#")]),t._v(" unobserve")]),t._v(" "),n("p",[t._v("该方法需要接收一个target参数，值为Element类型，用来指定停止监听的目标元素")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取元素")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止观察")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unobserve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"disconnect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disconnect"}},[t._v("#")]),t._v(" disconnect")]),t._v(" "),n("p",[t._v("该方法不需要接收参数，用来关闭观察期")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭观察器")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("disconnect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"takerecords"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#takerecords"}},[t._v("#")]),t._v(" takeRecords")]),t._v(" "),n("p",[t._v("该方法不需要接收参数，返回所有被观察的对象，返回值是一个数组")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取被观察元素")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" observerList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeRecords")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[t._v("observe方法的参数是一个DOM节点，如果需要观察多个节点，就要多次调用这个方法")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始观察多个元素")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"callback参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback参数"}},[t._v("#")]),t._v(" callback参数")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[t._v("目标元素的可见性变化时,就会调用观察器的回调函数callback")])]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[n("strong",[t._v("callback一般会触发两次。一次是目标元素刚刚进入视口，另一次是完全离开视口")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" io "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("changes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("changes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("上面代码中，callback函数的参数接收两个参数changes和observer")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("changes：这是一个数组，每个成员都是一个被观察的对象")]),t._v("。举例来说，如果同时有两个被观察的对象的可见性发生变化，那么changes数组里面就会打印出两个元素，如果只观察一个元素，我们打印changes[0]就能获取到被观察对象")]),t._v(" "),n("li",[n("strong",[t._v("observer: 就是一个对象，返回我们在实例中传入的第二个参数options(如果没传，则返回默认值)")])])]),t._v(" "),n("h2",{attrs:{id:"intersectionobserverentry对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserverentry对象"}},[t._v("#")]),t._v(" intersectionObserverEntry对象")]),t._v(" "),n("p",[t._v("上面提到的changes数组中的每一项都是一个IntersectionObserverEntry对象(下文简称io对象),对象提供目标元素的信息，一共有八个属性，我们打印这个对象")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建实例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" io "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("changes")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    changes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("change")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("change"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取元素")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始监听")]),t._v("\nio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("运行上面代码，并且改变dom的可见性，这时控制台可以看到一个对象\n"),n("img",{attrs:{src:a(1362),alt:"intersectionObserver"}})]),t._v(" "),n("p",[t._v("每个属性的含义如下")]),t._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"red"}},[t._v("boundingClientRect: 目标元素的矩形区域信息")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("intersectionRatio: 目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见是小于等于0")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("intersectionRect：目标元素与视口（或根元素）的交叉区域的信息")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("isIntersecting: 布尔值，目标元素与交集观察者的根节点是否相交")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("isVisible: 布尔值，目标元素是否可见（该属性还在试验阶段，不建议在生产环境中使用）")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("rootBounds：根元素的矩形区域的信息，getBoundingClientRect()方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回null")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("target：被观察的目标元素，是一个 DOM 节点对象")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒")])])]),t._v(" "),n("h2",{attrs:{id:"应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),n("ol",[n("li",[t._v("预加载(滚动加载、翻页加载、无限加载)")]),t._v(" "),n("li",[t._v("懒加载")]),t._v(" "),n("li",[t._v("其他")])]),t._v(" "),n("h2",{attrs:{id:"注意点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[t._v("#")]),t._v(" 注意点")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red","font-weight":"bold"}},[t._v("IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。")])]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red","font-weight":"bold"}},[t._v("规格写明，IntersectionObserver的实现，应该采用requestIdleCallback()，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。")])]),t._v(" "),n("h2",{attrs:{id:"资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web API 接口参考"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7035490578015977480#heading-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("神奇的交叉观察器 - IntersectionObserver"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);