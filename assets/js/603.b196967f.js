(window.webpackJsonp=window.webpackJsonp||[]).push([[603],{2564:function(t,n,e){"use strict";e.r(n);var a=e(46),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"构造签名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造签名"}},[t._v("#")]),t._v(" 构造签名")]),t._v(" "),e("p",[t._v("在TypeScript接口中，你可以使用new关键字来描述一个构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("interface Point {\n  new (x: number, y: number): Point;\n}\n")])])]),e("p",[t._v("以上接口中 new(x: number, y: number) 我们称之为构造签名，其语法如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ConstructSignature:\n  new TypeParametersopt ( ParameterListopt ) TypeAnnotationopt\n")])])]),e("p",[t._v("在上述的构造签名中，TypeParametersopt 、ParameterListopt 和 TypeAnnotationopt 分别表示：可选的类型参数、可选的参数列表和可选的类型注解。与该语法对应的集中常见的形式如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new C  \nnew C ( ... )  \nnew C < ... > ( ... )\n")])])]),e("h2",{attrs:{id:"构造函数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数类型"}},[t._v("#")]),t._v(" 构造函数类型")]),t._v(" "),e("p",[t._v("在TypeScript语言规范中这样定义构造函数类型：")]),t._v(" "),e("blockquote",[e("p",[t._v("An object type containing one or more construct signatures is said to be a constructor type. Constructor types may be written using constructor type literals or by including construct signatures in object type literals.")])]),t._v(" "),e("p",[t._v("通过规范中的描述信息，我们可以得出以下结论")]),t._v(" "),e("ul",[e("li",[t._v("包含一个或多个构造签名的对象类型被称为构造函数类型")]),t._v(" "),e("li",[t._v("构造函数类型可以使用构造函数类型字面量或包含构造签名的对象类型字面量来编写\n那么什么是构造函数类型字面量呢？构造函数类型字面量是包含单个构造函数签名的对象类型的简写。具体来说，构造函数类型字面量的形式如下：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new <T1, T2, ...>(P1, P2,...) => R\n")])])]),e("p",[t._v("该形式与以下对象字面量类型是等价的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{ new < T1, T2, ... > ( p1, p2, ... ) : R }\n")])])]),e("p",[t._v("下面举个实际的例子")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 构造函数字面量\nnew (x: number, y: number) => Point\n")])])]),e("p",[t._v("等价于一下对象类型字面量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  new (x: number, y: number): Point\n}\n")])])]),e("h2",{attrs:{id:"构造函数类型的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数类型的应用"}},[t._v("#")]),t._v(" 构造函数类型的应用")]),t._v(" "),e("p",[t._v("在介绍构造函数类型的应用前，我们先来看个例子")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("interface Point {\n  new (x: number, y: number): Point;\n  x: number;\n  y: number;\n}\n\nclass Point2D Implements Point {\n  readonly x: number;\n  readonly y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x; \n    this.y = y;\n  }\n}\nconst point: Point = new Point2D(1,2)\n")])])]),e("p",[t._v("对于以上的代码，TypeScript 编译器会提示以下错误信息：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Class 'Point2D' incorrectly implements interface 'Point'.\nType 'Point2D' provides no match for the signature 'new (x: number, y: number): Point'.\n")])])]),e("p",[t._v("相信很多刚接触 TypeScript 不久的小伙伴都会遇到上述的问题。要解决这个问题，"),e("strong",[t._v("我们就需要把对前面定义的 Point 接口进行分离，即把接口的属性和构造函数类型进行分离")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("interface Point {\n  x: number;\n  y: number;\n}\n\ninterface PointConstructor {\n  new (x: number, y: number): Point;\n}\n")])])]),e("p",[t._v("完成接口拆分之后，除了前面已经定义的 Point2D 类之外，我们又定义了一个 newPoint 工厂函数，该函数用于根据传入的 PointConstructor 类型的构造函数，来创建对应的 Point 对象。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Point2D implements Point {\n  readonly x: number;\n  readonly y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction newPoint(\n  pointConstructor: PointConstructor,\n  x: number,\n  y: number\n): Point {\n  return new pointConstructor(x, y);\n}\n\nconst point: Point = newPoint(Point2D, 2, 2);\n")])])]),e("h2",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1602920",target:"_blank",rel:"noopener noreferrer"}},[t._v("TS的构造签名和构造函数类型是啥"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);