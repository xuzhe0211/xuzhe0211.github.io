(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{2372:function(t,s,a){"use strict";a.r(s);var n=a(46),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"理解执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解执行上下文"}},[t._v("#")]),t._v(" 理解执行上下文")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("执行上下文(Execution Context):函数执行前进行的准备工作(也称执行上下文环境)")])]),t._v(" "),n("p",[n("span",{staticStyle:{color:"blue"}},[t._v("运行Javascript代码时，当代码执行进入一个环境时，就会为该环境创建一个执行上下文，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。")])]),t._v(" "),n("p",[t._v("具体做了什么先按下不表，先来看下Javascript执行环境有哪些？")]),t._v(" "),n("h3",{attrs:{id:"javascript中执行环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript中执行环境"}},[t._v("#")]),t._v(" Javascript中执行环境")]),t._v(" "),n("ol",[n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("全局环境")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("函数环境")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("eval函数环境(已不推荐使用)")])])]),t._v(" "),n("p",[t._v("那么与之对应的执行上下文类型同样有3种")]),t._v(" "),n("ol",[n("li",[n("span",{staticStyle:{color:"blue"}},[n("strong",[t._v("全局执行上下文")])])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[n("strong",[t._v("函数执行上下文")])])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[n("strong",[t._v("eval函数执行上下文")])])])]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[t._v("Javascript运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会进入函数执行环境，对应就会生成函数的执行上线文")])]),t._v(" "),n("p",[t._v("先播一个知识点： "),n("strong",[t._v("JS是单线程！！单线程！！单线程！！")])]),t._v(" "),n("p",[t._v("简单理解下单线程，就是同个时间段只能做一件任务，完成之后才可以继续下一个任务。正如女朋友只有一个，各位面向对象的小伙伴你们说对不对？有女朋友的必须说没毛病")]),t._v(" "),n("p",[t._v("既然这样，必须要有一个排队机制，不然就会出现几个流氓霸着扯到不让过？还有王法吗？？？")]),t._v(" "),n("h2",{attrs:{id:"js中管理多个执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js中管理多个执行上下文"}},[t._v("#")]),t._v(" JS中管理多个执行上下文")]),t._v(" "),n("p",[t._v("函数编程中，代码中会声明多个函数，对应的执行上下文也会存在多个。在Javascript中，通过栈的存取方式来管理执行上下文，我们可称其是执行栈，或函数调用栈(Call Stack)。")]),t._v(" "),n("p",[t._v('在说明执行栈之前，先来补丁"'),n("strong",[t._v("栈数据结构")]),t._v('"知识点')]),t._v(" "),n("h3",{attrs:{id:"栈数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈数据结构"}},[t._v("#")]),t._v(" 栈数据结构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(912),alt:"栈数据结构"}})]),t._v(" "),n("p",[t._v("借助前端大神的例子，用乒乓球盒子来理解栈的存取方式。（这个例子让我彻底记住了栈数据结构）")]),t._v(" "),n("p",[t._v('栈遵循"先进后出，后进先出"的规则，或称LIFO ("Last In First Out") 规则。')]),t._v(" "),n("p",[t._v("如图所示，我们只能从栈顶取出或者放入乒乓球，最先放入盒子的总数最后才取出。")]),t._v(" "),n("p",[t._v('栈中"放入、取出"，也可以成为 '),n("strong",[t._v('"入栈、出栈"')])]),t._v(" "),n("p",[t._v("总结栈数据结构的特点")]),t._v(" "),n("ol",[n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("后进先出，先进后出")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("出口在顶部，且仅有一个")])])]),t._v(" "),n("h3",{attrs:{id:"执行栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),n("p",[t._v("理解完栈的存取方式，我们接着分析Javascript中如何通过栈来管理多个执行上下文")]),t._v(" "),n("p",[t._v("程序执行进入一个"),n("strong",[t._v("执行环境")]),t._v("中，它的执行上线文就会被创建，并被推入执行栈中(入栈)；")]),t._v(" "),n("p",[n("strong",[t._v("程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出(出栈)，控制权交由下一个执行上下文")])]),t._v(" "),n("p",[t._v("因为JS执行中最先进去全局环境，所以处于 "),n("strong",[t._v('"栈底的永远是全局环境的执行上下文"')]),t._v("。而处于 "),n("strong",[t._v('"栈顶的是当前正在执行函数的执行上下文"')]),t._v("，当函数调用完成后，它就会从栈顶被推出(理想的情况下，闭包会阻塞该操作，闭包后续文章深入详解)")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"blue"}},[n("strong",[t._v("全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am bar'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(913),alt:"demo"}})]),t._v(" "),n("h3",{attrs:{id:"执行上下文的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的生命周期"}},[t._v("#")]),t._v(" 执行上下文的生命周期")]),t._v(" "),n("p",[t._v("执行上下文的生命周期有两个阶段")]),t._v(" "),n("ol",[n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("创建阶段(进入执行上下文)")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("执行阶段(代码执行)")])])]),t._v(" "),n("p",[t._v("创建阶段:函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段")]),t._v(" "),n("p",[t._v("执行阶段:执行函数中代码时，此时执行上下文进入执行阶段")]),t._v(" "),n("h4",{attrs:{id:"创建阶段操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段操作"}},[t._v("#")]),t._v(" 创建阶段操作")]),t._v(" "),n("ol",[n("li",[t._v("创建变量对象\n"),n("ul",[n("li",[t._v("函数环境会初始化创建Arguments对象(并赋值)")]),t._v(" "),n("li",[t._v("函数声明(并赋值)")]),t._v(" "),n("li",[t._v("变量声明，函数表达式声明(未赋值)")])])]),t._v(" "),n("li",[t._v("确定this执行(this由调用者确定)")]),t._v(" "),n("li",[t._v("确定作用域(词法环境决定，哪里声明定义，就在哪里确定)")])]),t._v(" "),n("h4",{attrs:{id:"执行阶段的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段的操作"}},[t._v("#")]),t._v(" 执行阶段的操作")]),t._v(" "),n("ol",[n("li",[t._v("变量对象赋值\n"),n("ul",[n("li",[t._v("变量赋值")]),t._v(" "),n("li",[t._v("函数表达式赋值")])])]),t._v(" "),n("li",[t._v("调用函数")]),t._v(" "),n("li",[t._v("顺序执行其他代码")])]),t._v(" "),n("p",[t._v("看到这里，我们不经会问变量对象是什么鬼，它与代码中常见的函数声明，变量声明有神马关系？？？")]),t._v(" "),n("h3",{attrs:{id:"变量对象和活动对象的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量对象和活动对象的区别"}},[t._v("#")]),t._v(" 变量对象和活动对象的区别")]),t._v(" "),n("p",[t._v("当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象(AO),这时候活动对象上的各种属性才能被访问")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"blue"}},[n("strong",[t._v("创建阶段对函数声明做赋值，变量及函数表达式仅作声明，真正赋值操作要等到执行上下文代码执行阶段")])])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("代码例子1：变量提升")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出undefined")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am here'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际执行过程")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明，var初始化undefined")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am here'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量重新赋值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("代码例子2： 函数声明优先级")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bar")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出bar() 整个函数声明")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"函数声明-变量声明-函数表达式优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数声明-变量声明-函数表达式优先级"}},[t._v("#")]),t._v(" 函数声明，变量声明，函数表达式优先级")]),t._v(" "),n("ol",[n("li",[t._v("函数声明，如果有同名属性，会被替换掉")]),t._v(" "),n("li",[t._v("变量，函数表达式")]),t._v(" "),n("li",[t._v("函数声明优先 > 变量，函数表达式")])]),t._v(" "),n("h2",{attrs:{id:"执行上下文的数量限制-堆栈移除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的数量限制-堆栈移除"}},[t._v("#")]),t._v(" 执行上下文的数量限制(堆栈移除)")]),t._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[t._v("执行上下文可存在多个，虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈移除。常见于递归调用，没有终止条件造成死循环场景")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用自身")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 报错： Uncaught RangeError"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Maximum call stack size exceeded\n")])])]),n("h2",{attrs:{id:"文末总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文末总结"}},[t._v("#")]),t._v(" 文末总结")]),t._v(" "),n("ol",[n("li",[t._v("Javascript是单线程")]),t._v(" "),n("li",[t._v("栈顶的执行上下文处于执行中，其他需要排队")]),t._v(" "),n("li",[t._v("全局上下文只有一个处于栈底，页面关闭时出栈")]),t._v(" "),n("li",[t._v("函数执行上下文可存在多个，但应避免堆栈移除")]),t._v(" "),n("li",[t._v("函数调用时就会创建新的上下文，即使调用自身，也会创建不同的执行上下文")])]),t._v(" "),n("h2",{attrs:{id:"资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000017890535",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端进击的巨人（一）：执行上下文与执行栈，变量对象"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/yygmind/blog/issues/12",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解JavaScript 中的执行上下文和执行栈"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports},912:function(t,s,a){t.exports=a.p+"assets/img/1657297207028.f5e92184.jpg"},913:function(t,s,a){t.exports=a.p+"assets/img/1657297633266.aeacdc73.jpg"}}]);