(window.webpackJsonp=window.webpackJsonp||[]).push([[606],{2569:function(t,a,s){"use strict";s.r(a);var n=s(46),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("Typescript中有许多关于类型系统的概念,如果只知其一不知其二的话，那么就有可能被报错大的满地找牙")]),t._v(" "),s("p",[t._v("这篇文章写的是关于类型系统中的"),s("strong",[t._v("协变与逆变")]),t._v("的概念，了解协变和逆变是如何发生及运作的")]),t._v(" "),s("h2",{attrs:{id:"类型关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型关系"}},[t._v("#")]),t._v(" 类型关系")]),t._v(" "),s("p",[t._v("理解一个新东西所需要的是一个良好且完善的上下文，所以需要先了解最基础的类型关系。")]),t._v(" "),s("p",[t._v("在Typescript中类型只与值有关，即"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸭子类型"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"父子类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父子类型"}},[t._v("#")]),t._v(" 父子类型")]),t._v(" "),s("h3",{attrs:{id:"普通函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通函数"}},[t._v("#")]),t._v(" 普通函数")]),t._v(" "),s("p",[t._v("假设有如下接口类型")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Dog继承于父类Animal，也就是说Dog是Animal的子类型,我们可以称之为 Dog ≼ Animal")]),t._v(" "),s("p",[t._v("可以看到，子类相较于父类更具体，属性或行为更多。")]),t._v(" "),s("p",[t._v("同时可以看到因为"),s("strong",[t._v("鸭子类型")]),t._v("而出现的一个现象(同时也被称为类型兼容性)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Animal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dog"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Dog\n\nanimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// √ 因为 animal 只需要 age 一个属性，而 dog 中含有 age 和 bark() 两个属性，赋值给 animal 完全没问题。")]),t._v("\n\ndog "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" animal \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// × Error: Property 'bark' is missing in type 'Animal' but required in type 'Dog'.")]),t._v("\n")])])]),s("p",[s("span",{staticStyle:{color:"red"}},[t._v("因为animal中缺少dog需要的bark()属性，因此赋值失败并报错")])]),t._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ol",[s("li",[s("span",{staticStyle:{color:"red"}},[t._v("子类型比父类型描述的更具体,父类型相对于子类型是更广泛的,子类型相对于父类型是更精确的")])]),t._v(" "),s("li",[s("span",{staticStyle:{color:"red"}},[t._v("判断是否是子类型可以这么理解，子类型是一定可以赋值给父类型的")])])]),t._v(" "),s("h3",{attrs:{id:"联合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[t._v("#")]),t._v(" 联合类型")]),t._v(" "),s("p",[t._v("假如有如下类型：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("type Parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v("\ntype Son "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Parent\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" son "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Son\n\nson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// × Error: Type 'Parent' is not assignable to type 'Son'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Type '\"c\"' is not assignable to type 'Son'.")]),t._v("\nparent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" son \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// √ ")]),t._v("\n")])])]),s("p",[t._v("Parent可能是'c'，但是Son类型并不包括'c'这个字面量类型，因此赋值失败并报错")]),t._v(" "),s("p",[t._v("可以从这个案例看出 Son ≼ Parent.因为Parent更广泛，Son更具体")]),t._v(" "),s("p",[t._v("可以这么理解:"),s("span",{staticStyle:{color:"blue"}},[t._v("联合类型相当于集合,Son就是Parent子集。不过在这是说Son是Parent的子类型")])]),t._v(" "),s("h2",{attrs:{id:"协变和逆变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协变和逆变"}},[t._v("#")]),t._v(" 协变和逆变")]),t._v(" "),s("p",[t._v("依旧假设我们有上面的Animal和Dog两个父子类型")]),t._v(" "),s("h3",{attrs:{id:"协变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协变"}},[t._v("#")]),t._v(" 协变")]),t._v(" "),s("p",[t._v("协变的情况其实很简单就是上面说的类型兼容性,因此协变其实无处不在")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animals"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dogs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nanimals "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dogs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("完全没问题，就不在重复了。这就是协变现象")]),t._v(" "),s("h3",{attrs:{id:"逆变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逆变"}},[t._v("#")]),t._v(" 逆变")]),t._v(" "),s("p",[t._v("逆变现象只会在函数类型中的函数参数上出现。假设有如下代码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("haveAnimal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("animal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("haveDog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dog"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age\n    dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhaveAnimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" haveDog \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: Type '(dog: Dog) => void' is not assignable to type '(animal: Animal) => void'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Types of parameters 'dog' and 'animal' are incompatible.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Property 'bark' is missing in type 'Animal' but required in type 'Dog'.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("haveAnimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("span",{staticStyle:{color:"red"}},[t._v("传入的Animal没有haveAnimal需要的bark()属性，因此在检查时候报错了")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意:TS之前的函数参数是"),s("strong",[t._v("双向协变的，也就是说技术协变又是逆变的、且这段代码并不会报错")]),t._v(".但是在如今的版本 (Version 4.1.2) 在 tsconfig.json 中有 strictFunctionTypes 这个配置来修复这个问题。（默认开启）")])]),t._v(" "),s("p",[t._v("那么这时候修改代码为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" haveAnimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" haveDog\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" haveDog "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" haveAnimal\n")])])]),s("p",[t._v("发现完全没问题！\n因为我们在运行 haveDog（实际运行还是 haveAnimal ） 的时候会传入 Animal 的子类Dog，之前说过子类型的属性比父类型更多，因此haveDog需要访问的属性在 Animal 中都有，那么在 Dog 类型中肯定只会更多。")]),t._v(" "),s("p",[s("span",{staticStyle:{color:"red"}},[t._v("可以发现对于两个父子类型作为函数参数构建两个函数类型，这两个函数类型的父子关系逆转了，这就是逆变")])]),t._v(" "),s("p",[t._v("同时，在返回值类型上和平常没有什么区别的是协变的")]),t._v(" "),s("h3",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("在函数类型中,参数类型是你变得，返回值类型是协变的")]),t._v(" "),s("h2",{attrs:{id:"练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("p",[t._v("有如下代码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("type NoOrStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntype No "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("noOrStr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NoOrStr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("no")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" No")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("noOrstr = no会报错还是no=noOrStr会报错")]),t._v(" "),s("h3",{attrs:{id:"答案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),s("p",[t._v("noOrStr = no会报错")]),t._v(" "),s("h3",{attrs:{id:"解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[t._v("#")]),t._v(" 解析")]),t._v(" "),s("ul",[s("li",[t._v("在练习中，可以看做No ≼ NoOrStr，进行逆变转换 noOrStr ≼ no。"),s("span",{staticStyle:{color:"red"}},[t._v("子类可以赋值给父类，父类不能赋值给子类，因此no = noOrStr是对的没有问题，noOrStr = no就会报错")])]),t._v(" "),s("li",[t._v("又或者换种角度,noStr能处理number|string类型的值,而no只能处理number类型的值。\n"),s("ul",[s("li",[t._v("因此当no = noOrStr时候没问题,因为调用no()时候只会传入number类型的值，而noOr可以处理包括numbner两种类型的值")]),t._v(" "),s("li",[t._v("而当noOrStr = no时就出为了，因为调用noOrStr时会传入number|string，而no只能处理number类型的值，当调用noOrStr传入string的类型的值时，no处理不了 因此报错")])])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/sl1673495/blogs/issues/54",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 中的子类型、逆变、协变是什么"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6905666894984904717",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 类型系统 协变与逆变的理解 函数类型的问题"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);