(window.webpackJsonp=window.webpackJsonp||[]).push([[647],{2663:function(t,s,a){"use strict";a.r(s);var e=a(46),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"输出esm、cjs和umd格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出esm、cjs和umd格式"}},[t._v("#")]),t._v(" 输出esm、cjs和umd格式")]),t._v(" "),a("h3",{attrs:{id:"支持全部的生态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持全部的生态"}},[t._v("#")]),t._v(" 支持全部的生态")]),t._v(" "),a("p",[a("mark",[t._v("esm是EcmaScript module的缩写")]),t._v(" "),a("mark",[t._v("cjs是CommonJS module的缩写")]),t._v(" "),a("mark",[t._v('umd是"Universal Module Definition"的缩写，它可以在<script>标签中执行、被CommonJS模块加载器加载、被AMD模块加载器加载')])]),t._v(" "),a("p",[t._v("esm被认为是未来，但cjs仍然在社区和生态系统中占有重要地位。esm对打包工具来说更容易正确的进行treeshaking，因此对于库来说，拥有这种格式很重要，或许在将来的某一天，你的库只需要输出esm。")]),t._v(" "),a("p",[a("span",{staticStyle:{color:"red"}},[t._v("你可能已经注意到，umd已经与CommonJS模块加载器兼容--所以为什么还要同时具备cjs和umd输出呢？一个原因是，"),a("strong",[t._v("与umd文件相比，CommonJS文件在对依赖进行条件导入时通常表现更好")]),t._v("；例如")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-lib.production.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-lib.development.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticStyle:{color:"red"}},[t._v("上面的例子，当使用CommonJS模块时，只会引入production或development包中的一个。但是对于UMD模块，最终可能会将两个包全部引入")]),t._v("。有关更多信息，请"),a("a",{attrs:{href:"https://github.com/frehner/modern-guide-to-packaging-js-library/issues/9",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考讨论"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("span",{staticStyle:{color:"orange"}},[t._v("最后还需要注意是，开发者可能会在引用中同时使用cjs和esm，发生双包危险。"),a("a",{attrs:{href:"https://nodejs.org/api/packages.html#dual-package-hazard",target:"_blank",rel:"noopener noreferrer"}},[t._v("dual package hazard"),a("OutboundLink")],1),t._v("一文较少了一些缓解该问题的方法，利用package.json#exports进行package exports也可以防止这种情况发生")])]),t._v(" "),a("h2",{attrs:{id:"输出多文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出多文件"}},[t._v("#")]),t._v(" 输出多文件")]),t._v(" "),a("details",[a("summary",[t._v("通过保留文件结构更好的支持treeshaking")]),t._v("\n如果你对你的库使用了打包工具或编译器，可以对其进行配置以保留源文件目录结果。这样可以更容易的对特定文件进行side effects标记，有助于开发者的打包工具进行treeshaking.请参考"),a("a",{attrs:{href:"https://levelup.gitconnected.com/code-splitting-for-libraries-bundling-for-npm-with-rollup-1-0-2522c7437697"}},[t._v("这篇文章")]),t._v(" "),a("p",[t._v("一个例外是，如果你要创建一个不依赖任何打包工具可以直接在浏览器中使用的产出(通常是umd格式，但也可能是现代的esm格式)。在这种情况下，最好让浏览器请求一个大文件，而不是请求多个小文件。此外，你应该进行代码压缩为其创建sourcemap")])]),t._v(" "),a("h2",{attrs:{id:"要不要压缩代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要不要压缩代码"}},[t._v("#")]),t._v(" 要不要压缩代码")]),t._v(" "),a("details",[a("summary",[t._v("确定你期望的代码压缩程度")]),t._v(" "),a("p",[t._v("你可以将一些层面的代码压缩应用到你的库中，这取决于你对你的代码最终通过开发者的打包工具后的大小的追求程度。")]),t._v(" "),a("p")]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/frehner/modern-guide-to-packaging-js-library/blob/main/README-zh_CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("打包 JavaScript 库的现代化指南"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);