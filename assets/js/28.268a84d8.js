(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{2020:function(t,_,a){t.exports=a.p+"assets/img/ccf445710a474c109f5f030a021a48c6~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.73faf0c5.png"},2021:function(t,_,a){t.exports=a.p+"assets/img/344976404f134e43929857e95f28b37d~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.45d3f34b.png"},2022:function(t,_,a){t.exports=a.p+"assets/img/d33c5b0e7a31414f84de92500099c6e8~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.8a0f2bd7.png"},2023:function(t,_,a){t.exports=a.p+"assets/img/3f555a5720a1456da541f6f51770219b~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.85975a50.png"},2024:function(t,_,a){t.exports=a.p+"assets/img/9ae76a2c4cdd41d48da669183cda27e7~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.62e8476e.png"},2025:function(t,_,a){t.exports=a.p+"assets/img/31b27b6a70534c9595714956034c8a4f~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.63693bd5.png"},2026:function(t,_,a){t.exports=a.p+"assets/img/f6d37e780c1846099ddf5352035ea286~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.b3c7ea5c.png"},2027:function(t,_,a){t.exports=a.p+"assets/img/712b98e4c4c649d5a6e5b954b63ca12d~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.494250aa.png"},2028:function(t,_,a){t.exports=a.p+"assets/img/88e3fd2af07242f68ccf4c49fab1a179~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.59fc8994.png"},2029:function(t,_,a){t.exports=a.p+"assets/img/ff9a0c63f9be430db0fe35c3a5ac3147~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.955613ea.png"},2030:function(t,_,a){t.exports=a.p+"assets/img/d8377393b66843f3bd50f2ddc5f9ed06~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.8ba5d5dd.png"},2031:function(t,_,a){t.exports=a.p+"assets/img/ad3b4a5f2615492ab9f32735080b0ef2~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.2f1d4c56.png"},2032:function(t,_,a){t.exports=a.p+"assets/img/976815727bbc42ea882f1d4eeb3f38d1~tplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.e64988b3.png"},2920:function(t,_,a){"use strict";a.r(_);var s=a(46),e=Object(s.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("在NetWork 面板中发送 mock请求！！！")])]),t._v(" "),s("p",[t._v("前端开发在调试过程中，经常需要各种不同的数据来反复调试，所以我们前端程序员会经常在脚手架中集成 mock 或者通过代理的方式去hack的实现，但是现在再也不用这么麻烦了，Chrome 117 原生就支持了，而且体验相当丝滑。")]),t._v(" "),s("p",[t._v("你可以实现什么效果呢？")]),t._v(" "),s("ul",[s("li",[t._v("拦截 HTML 文件，读取本地文件")]),t._v(" "),s("li",[t._v("拦截 JS 文件，读取本地文件")]),t._v(" "),s("li",[t._v("拦截CSS 文件，读取本地文件")]),t._v(" "),s("li",[t._v("拦截 请求，读取本地文件")])]),t._v(" "),s("p",[t._v("也就是，一个页面上所有的资源包括图片,理论上七内容都可以自由修改，并且保存在本地的。")]),t._v(" "),s("h2",{attrs:{id:"修改返回响应数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改返回响应数据"}},[t._v("#")]),t._v(" 修改返回响应数据")]),t._v(" "),s("p",[t._v("想要修改接口返回的数据,设置成特定的数据,首先打开 网络(Network) 面板，找到你需要Mock的接口，右键然后选择替换内容(Override content).")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2020),alt:"右键选择"}})]),t._v(" "),s("p",[t._v("这时候浏览器会提示：选择要用来存储替换文件的文件夹,这个文件夹主要作用是用来 "),s("strong",[t._v("保存Mock的替换文件")]),t._v("，方便下次Mock请求直接使用")]),t._v(" "),s("p",[t._v("点击 选择文件夹")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2021),alt:"选择文件夹"}})]),t._v(" "),s("p",[t._v("选择我们刚刚新建的文件夹，我是在电脑桌面上新建了一个空的文件夹 chrome_devtools, 选择之后会提示 "),s("strong",[t._v("允许完整的访问权限")]),t._v("，一定要注意点击允许")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2022),alt:"选择允许权限"}})]),t._v(" "),s("p",[s("span",{staticStyle:{color:"blue"}},[t._v("这个时候 DevTools 会自动跳转到 源代码/来源(Sources) 面板，并且会生成对应请求的Mock文件：")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(2023),alt:"源代码"}})]),t._v(" "),s("p",[t._v("编辑Mock文件，自定义一个JSON数据格式然后保存")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2024),alt:"自定义数据格式"}})]),t._v(" "),s("p",[t._v("重新发起请求,发现被拦截的接口会有一个"),s("strong",[t._v("高亮的标识")]),t._v("，鼠标移入会提示对应的信息，并且响应的数据已经变成了我们 修改后 的数据")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2025),alt:"mock响应数据"}})]),t._v(" "),s("p",[t._v("当然处了修改接口返回的内容以外，沃恩还可以修改返回的 响应头")]),t._v(" "),s("h2",{attrs:{id:"修改返回的响应头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改返回的响应头"}},[t._v("#")]),t._v(" 修改返回的响应头")]),t._v(" "),s("p",[t._v("想要修改接口返回的响应头，增加我们想要返回的 key:value, 首先打开 网络(Network) 面板，找到你需要Mock的接口，右键然后选择 替换标头(Override headers)")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2026),alt:"替换标头"}})]),t._v(" "),s("p",[t._v("右侧面板会直接出现 添加标头 按钮")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2027),alt:"添加标头"}})]),t._v(" "),s("p",[t._v("点击添加，这里我们添加一个 Test-Header: testHeader 做个简单的测试")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2028),alt:"testheader"}})]),t._v(" "),s("p",[t._v("也可以直接打开 源代码/来源(Sources) 面板，找到对应的文件 .headers 文件中直接添加，两种添加方式效果一样")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2029),alt:"sources"}})]),t._v(" "),s("p",[t._v("再次重新发起请求，发现响应头中已经返回了我们设置的 Test-Header: testHeader")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2030),alt:"预览"}})]),t._v(" "),s("p",[t._v("查看我们开始新建的 chrome_devtools 文件夹，发现Mock的数据都已经保存到了文件夹中了")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2031),alt:"本地"}})]),t._v(" "),s("h2",{attrs:{id:"清除拦截的mock数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清除拦截的mock数据"}},[t._v("#")]),t._v(" 清除拦截的Mock数据")]),t._v(" "),s("p",[t._v("当我们 Mock 数据程序调试完成之后，想要调用真实的接口数据，这个时候一定要记得清除 Mock替换文件")]),t._v(" "),s("p",[s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("打开 源代码/来源(Sources) 面板，取消勾选 启动本地替换 或者直接点击清除图表即可")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(2032),alt:"清除本地"}})]),t._v(" "),s("h2",{attrs:{id:"资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/7281210797959561227?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文"),s("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=e.exports}}]);