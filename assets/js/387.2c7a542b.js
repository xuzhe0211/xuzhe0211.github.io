(window.webpackJsonp=window.webpackJsonp||[]).push([[387],{2161:function(s,n,e){"use strict";e.r(n);var t=e(46),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[e("span",{staticStyle:{color:"blue"}},[s._v("Docker-compose 是用于定义和运行多容器Docker应用程序的编排工具。使用docker-compose后不在需要逐一创建和启动容器。你可以使用YML文件来配置应用程序，然后使用一个命令，就可以从YML文件配置中创建并启动所有服务")]),s._v("。本章将介绍如何安装Docker-compose，并对docker-compose.yml配置文件及常用命令进行详细总结和演示。")]),s._v(" "),e("h2",{attrs:{id:"docker-compose-的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-的安装"}},[s._v("#")]),s._v(" Docker-Compose 的安装")]),s._v(" "),e("p",[s._v("安装 docker-compose 前必须先安装好docker。Docker-compse 的下载和安装很简单，网上有很多教程，我就不在详述了。这里只记录下ubuntu系统下docker-compose的安装过程")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Step 1: 以ubuntu为例，下载docker-compose")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" -o /usr/local/bin/docker-compose\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Step 2: 给予 docker-compose 可执行权限")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /usr/local/bin/docker-compose\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Step 3: 查看docker-compose版本")]),s._v("\n$ docker-compose --version\n")])])]),e("h2",{attrs:{id:"docker-compose-yml-配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-配置文件"}},[s._v("#")]),s._v(" Docker-compose.yml 配置文件")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一部分：Building(构建镜像)")]),s._v("\nweb: \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用当前目录下的Dockerfile")]),s._v("\n    build: "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n    args: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加额外参数")]),s._v("\n        APP_HOME: app\n    volumes: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目录挂载")]),s._v("\n        - .:/code\n    depends_on: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 依赖db和redis")]),s._v("\n        - db\n        - redis\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用定制化的Dockerfile，指定新目录相对路径和文件名")]),s._v("\n    build:\n        context: ./dir\n        dockerfile: Dockerfile.dev\n        container_name: app "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#自定义容器名")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 基于现有镜像构建")]),s._v("\n    image: ubuntu\n    image: ubuntu:14.04\n    image: remote-registry:4000/postgresql\n    image: bcbc65fd\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二部分：Ports(端口)")]),s._v("\nports: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定端口映射,HOST:Container")]),s._v("\n    - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"6379"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定容器的端口6379，宿主机会随机映射端口")]),s._v("\n    - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8080: 80"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 宿主机端口8080，对应容器80")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暴露端口给-link或处于同一网络的容器，不暴露给宿主机")]),s._v("\n  expose: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3000"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第三部分: Environment Variableds(环境变量)")]),s._v("\nenvironment:\n    MODE: development\n    SHOW: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'true'")]),s._v("\n\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等同于")]),s._v("\n environment:\n    - "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MODE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("development\n    - SHOW: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'true'")]),s._v("\n\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用环境变量.env文件")]),s._v("\n env_file: .env\n env_file:\n    - ./common.env\n    - ./apps/web.env\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第四部分：commands(命令)")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器启动后默认执行命令")]),s._v("\n command: bundle "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" thin -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n command: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/bin/bash'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'start.sh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#容器启动后程序入口")]),s._v("\n entrypoint: /code/entrypoint.sh\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第五部分: Networks(网络)")]),s._v("\nnetworks: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用bridge驱动创建名为frontend的网络")]),s._v("\n    frontend:\n        driver: bridge\n    networks: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用创建的网络进行通信")]),s._v("\n        - frontend   \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加入已经存在的外部网络")]),s._v("\nnetworks:\n    default:\n        external:\n            name: my-pre-existing-network\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第六部分：Volumes(数据卷)")]),s._v("\nvolumes: "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建名为postgres_data的数据卷")]),s._v("\n    postgres_data:\n    \n    db:\n      image: postgres:latest\n      volumes:\n        - postgres_data:/var/lib/postgresql/data\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第七部分：External Links(外部链接)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目的是让Compose能够连接那些不在docker-compose.yml中定义的单独运行容器")]),s._v("\n  services:\n    web:\n      external_links:\n        - redis_1\n        - project_db_1:mysql\n")])])]),e("h2",{attrs:{id:"docker-compose-命令大全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-命令大全"}},[s._v("#")]),s._v(" Docker-compose 命令大全")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认使用 docker-compose.yml 构建镜像")]),s._v("\n$ docker-compose build\n$ docker-compose build --no-cache "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#不带缓存的构建")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 要求 docker-compose 每次重新构建镜像")]),s._v("\n$ docker-compose up --build\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定不同yml文件模块用于构建镜像")]),s._v("\n$ docker-compose build -f docker-compose1.yml\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出Compose文件构建的镜像")]),s._v("\n$ docker-compose images\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动所有编排容器服务")]),s._v("\n$ docker-compose up -d\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看正在运行中的容器")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有编排容器，包括已停止的容器")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入指定容器执行命令")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" nginx "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" web python manage.py migrate --noinput\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看web容器的实时日志")]),s._v("\n$ docker-compose logs -f web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止所有up命令启动的容器")]),s._v("\n$ docker-compose down\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止所有up命令启动的容器，并移除数据卷")]),s._v("\n$ docker-compose down -v\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新启动停止服务的容器")]),s._v("\n$ docker-compose restart web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停web容器")]),s._v("\n$ docker-compose pause web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 恢复web容器")]),s._v("\n$ docker-compose unpause web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除web容器，删除前必须停止stop web容器服务")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看各个服务器容器内运行的进程")]),s._v("\n$ docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[s._v("#")]),s._v(" 资料")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://pythondjango.cn/python/tools/3-docker-compose/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker-compose命令大全及配置文件详解"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=a.exports}}]);