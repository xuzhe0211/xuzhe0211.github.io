(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{1935:function(a,t,e){a.exports=e.p+"assets/img/462571104-616f8453763be_fix732.4171fffa.png"},2850:function(a,t,e){"use strict";e.r(t);var s=e(46),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("这篇文章整理一下nuxt中pages、layout、components、plugins的相关使用,之前已经上手使用过了，这些详细看一下官方文档，加深理解")]),a._v(" "),s("h3",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[a._v("#")]),a._v(" 目录结构")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("|-- src\n    |-- component   ---编写重复使用组件\n    |-- layout      ---编写全局布局\n    |-- pages       --- 编写具体路由页面\n    |-- plugins     --- 编写需要的插件\n")])])]),s("h2",{attrs:{id:"components"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[a._v("#")]),a._v(" components")]),a._v(" "),s("p",[a._v("该components目录包含您的Vue.js组件。组件构成了页面的不同部分，可以重复使用并导入页面、布局甚至其他组件中。")]),a._v(" "),s("p",[a._v("通过在Nuxt.config.js文件中进行如下配置，可以直接使用组件，无需导入")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("export default {\n  components: true\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("|-- components\n    |-- TheHeader.vue\n    |-- TheFooter.vue\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<template>\n  <div>\n    <TheHeader>\n    <Nuxt />\n    <TheFooter>\n  </div>\n</template>\n")])])]),s("p",[a._v("引用时，需要与文件名相同。")]),a._v(" "),s("p",[s("strong",[a._v("当components层级较多时的引用方法")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("--components\n  |--base\n      |--foo\n         |--CustomButton.vue\n")])])]),s("p",[a._v("组件名称将基于其自己的路径目录和文件名。因此，改组件将是")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<BaseFooCustomButton>\n")])])]),s("h3",{attrs:{id:"获取数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取数据"}},[a._v("#")]),a._v(" 获取数据")]),a._v(" "),s("p",[a._v("components获取数据的方式为：Nuxt中的fetch()。无法使用asyncData，因为asyncData方法会在组件(仅限页面组件)每次加载之前就被调用")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<script>\n  export default {\n    async fetch({ store, params}) {\n      let { data } = await axios.get('http://my-api/stars');\n      store.commit('setStarts', data)\n    }\n  }\n<\/script>\n")])])]),s("p",[s("strong",[a._v("注意：无法在内部使用this获取组件实例，fetch是在组件初始化之前就被调用")])]),a._v(" "),s("h2",{attrs:{id:"layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[a._v("#")]),a._v(" Layout")]),a._v(" "),s("p",[a._v("编写全局布局，例如，侧边栏，导航栏")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("|-- layouts\n    |-- default.vue\n")])])]),s("p",[a._v("default.vue文件，会默认应用到所有为指定布局的页面")]),a._v(" "),s("p",[a._v("引用导航栏，页脚组件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<template>\n  <div>\n    <TheHeader />\n    <Nuxt />\n    <TheFooter />\n  </div>\n</template>\n")])])]),s("p",[a._v("也可以自定义导入需要的布局")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// X.vue\n<script>\nexport default {\n  layout: 'blog',\n  // OR\n  layout (context) {\n    return 'blog'\n  }\n}\n<\/script>\n")])])]),s("p",[a._v("layouts有个特殊的页面--error。虽然这个文件放在layouts文件夹中，但它应该被视为一个页面。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<template>\n  <div class="container">\n    <h1 v-if="error.statusCode === 404">!!!!!!!!!!!!!!啊呀，页面找不到了</h1>\n    <h1 v-else>An error occurred</h1>\n    <h2>这是 error.message  {{error.message}}</h2>\n\n    <h2>这是 error.statusCode  {{error.statusCode}}</h2>\n    <NuxtLink to="/">Home page</NuxtLink>\n  </div>\n</template>\n\n<script>\nexport default {\n  layout: \'errorLayout\',\n  props: [\'error\'] // you can set a custom layout for the error page\n}\n<\/script>\n')])])]),s("p",[a._v("接收error参数。在全局的api接口调用，处理错误信息")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("export default function({ app, $axios, error}, inject) {\n  const API = {};\n  API.getGameList = function() {\n    return $axios.$get('/api/apps.json').catch(e => {\n      error({ statusCode: e.response.status, message: e.response.stateText})\n    })\n  }\n  app.api = API;\n  inject('api', API)\n}\n")])])]),s("p",[a._v("这样，就能捕获接口异常信息，跳转到 error 页面")]),a._v(" "),s("h2",{attrs:{id:"pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pages"}},[a._v("#")]),a._v(" pages")]),a._v(" "),s("p",[a._v("page包含所有的目录和路由。nuxt会根据文件名自动生成路由，也可以根据接收的参数生成动态页面，接收的参数以下划线开头。如：_slug")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("|-- pages\n    |--_slug\n        |--index.vue\n    |-- game\n        |-- index.vue\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<nuxt-link :to="{ name: \'slug\', params: { slug:item.slug} }"></nuxt-link>\n\n<nuxt-link :to="/game"></nuxt>\n')])])]),s("p",[a._v("_slug/index.vue文件接收参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<template>\n  <h1>{{ this.slug }}</h1>\n</template>\n\n<script>\nexport default {\n  async asyncData({ params }) {\n    const slug = params.slug;\n    return { slug }\n  }\n}\n<\/script>\n")])])]),s("h3",{attrs:{id:"page获取数据的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#page获取数据的方法"}},[a._v("#")]),a._v(" page获取数据的方法")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("asyncData")]),a._v(" "),s("p",[a._v("这个钩子只能放在页面组件上。不同的是fetch，此钩子在客户端渲染期间不会显示加载占位符，相反，此钩子会阻止路由导航，直到解决为止，如果失败则显示页面错误")])]),a._v(" "),s("li",[s("p",[a._v("fetch(Nuxt 2.12+)")]),a._v(" "),s("p",[a._v("这个钩子可以放在任何组件上，并提供渲染加载状态(在客户端渲染期间)和错误的快捷方式")]),a._v(" "),s("p",[a._v("在fetch里可以使用this。this的数据，需要现在data中定义")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("export default {\n  asyncData(context) {\n    const tempParams = context.params;\n    return { tempParams }\n  }\n  data() {\n    return {\n      iframeShow: false\n    }\n  }\n  async fetch({ params }) {\n    this.iframeShow = await params.iframeShow\n  }\n}\n")])])]),s("h3",{attrs:{id:"page其他配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#page其他配置"}},[a._v("#")]),a._v(" page其他配置")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("文档head信息")])]),a._v(" "),s("li",[s("p",[a._v("layout布局")])]),a._v(" "),s("li",[s("p",[a._v("加载loading")])]),a._v(" "),s("li",[s("p",[a._v("路由过渡动画transition")])]),a._v(" "),s("li",[s("p",[a._v("中间件middleware:定义此页面的中间件。中间件将在呈现页面之前被调用")])]),a._v(" "),s("li",[s("p",[a._v("滚动到顶部scrollToTop")])]),a._v(" "),s("li",[s("p",[a._v("监听字符串变化watchQuery：可以设置查询字符串的监听程序")]),a._v(" "),s("p",[a._v("如：watchQuery:['sq'],<nuxt-link to=\"/test/abc?sq=1\">test<nuxt-link>将会监听到sq的变化，将调用所有组件方法(asyncData,fetch(context),validate, layout等)。监听默认情况下处于禁用状态，以提高性能。"),s("strong",[a._v("如果要为所有查询字符串设置监听程序，请设置watchQuery:true")])])]),a._v(" "),s("li",[s("p",[a._v('key:key属性赋值到<router-view :key="$route.path" />这对于在动态页面和不同路径中进行转换很有用。不同的key回事页面组件重新渲染。')])]),a._v(" "),s("li",[s("p",[a._v("配置Configuration: 可以重命名当前page名字")])]),a._v(" "),s("li",[s("p",[a._v("忽略页面Ignoring pages")]),a._v(" "),s("p",[a._v("在文件名前面加'-',如: pages/-about.vue，如果你想忽略页面以便它们不包含在生成的router.js文件中，那么你可以通过前面加上-来忽略他们，about.vue将被忽略")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("export default {\n  middleware: 'auth',\n  layout: 'gamePlay',\n  head() {\n    return {\n      title: 'New head'\n    }\n  },\n  loading: false,\n  transition: 'fade',\n  scrollToTop: true, \n  watchQuery: ['sq'],\n  key(route) {\n    return route.fullPath\n  },\n  dir: {\n    pages: 'routes'\n  }\n}\n")])])]),s("h2",{attrs:{id:"plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[a._v("#")]),a._v(" plugins")]),a._v(" "),s("p",[a._v("该目录文件,包含想要在vue.js实例化之前的所有js插件。")]),a._v(" "),s("p",[a._v("例如，elementUI引用，之前介绍的"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000040681617",target:"_blank",rel:"noopener noreferrer"}},[a._v("axios封装"),s("OutboundLink")],1),a._v("、"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000040681617",target:"_blank",rel:"noopener noreferrer"}},[a._v("国际化文件"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("最重要的是，需要在nuxt.config.js里配置你需要的插件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("module.exports = {\n  modules: ['@nuxtjs/axios'],\n  plugins: [\n    '~/plugins/element-ui',\n    '~/plugins/api',\n    { src: '~plugins/vueLazyLoad', ssr: false },\n    '~/plugins/gtag',\n    '~/plugins/global',\n    '~/plugins/i18n'\n  ]\n}\n")])])]),s("p",[a._v("最后，你可以直接在具体的页面中使用了")]),a._v(" "),s("br"),a._v(" "),s("br"),a._v("\n最后附带一个nuxt声明周期图\n"),s("p",[s("img",{attrs:{src:e(1935),alt:"nuxt生命周期"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);