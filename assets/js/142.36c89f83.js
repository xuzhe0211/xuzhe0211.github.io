(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{1028:function(t,s,a){t.exports=a.p+"assets/img/f6f3e92d9d64492eabc86407309f07ec~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.dc972cf2.png"},1029:function(t,s,a){t.exports=a.p+"assets/img/150c0a58bff5465eaf66d16f36e2ad88~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.077bc951.png"},1030:function(t,s,a){t.exports=a.p+"assets/img/2e2bd1f376c345e0850f1a14d15b656c~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.b22e2d1f.png"},1031:function(t,s,a){t.exports=a.p+"assets/img/eaa61e6388a84155b5b0a953a8c82638~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.b0909394.png"},2405:function(t,s,a){"use strict";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"js引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js引擎"}},[t._v("#")]),t._v(" JS引擎")]),t._v(" "),n("p",[t._v("之前有篇文章"),n("a",{attrs:{href:"https://qborfy.com/today/20230117.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解React中Fiber架构(一)"),n("OutboundLink")],1),t._v("中有讲到浏览器进程如何渲染网页和执行js代码的，我们在复习一遍")]),t._v(" "),n("p",[t._v("一个完整的web网页在浏览器显示和交互的进程(chrome为主)，需要设计到县城主要以下几个部分")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("GUI渲染线程")]),t._v("，负责渲染浏览器界面HTML元素，当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时，该线程就会执行")]),t._v(" "),n("li",[n("strong",[t._v("Javascript引擎线程")]),t._v(",JS内核，负责处理Javascript脚本程序。一直等待着任务队列中人物的到来，然后解析Javascript脚本运行代码")]),t._v(" "),n("li",[n("strong",[t._v("定时触发线程")]),t._v(",定时器setInterval与setTimeout所在线程,为什么要单独弄个线程处理定时器？是因为Javascript引擎是单线程的，如果处于阻塞县城状态就会影响计时的准确")]),t._v(" "),n("li",[n("strong",[t._v("事件触发线程")]),t._v(",用来控制事件轮训，JS引擎自己忙不过来,需要浏览器另开县城协助")]),t._v(" "),n("li",[n("strong",[t._v("异步http请求线程")]),t._v(",在XMLHttpRequest或fetch在连接后是通过浏览器开一个线程请求，将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更时间放到Javascript引擎的处理队列中等待处理。这里需要注意XMLHttpRequest和fetch的区别，fetch是w3c标准化后一个专门提供给开发调用发起http的API接口，XMLHttpRequest是一个非标准化的Http请求对象，主要是可以发起http请求获取XML数据")])]),t._v(" "),n("p",[t._v("针对JS引擎，官方定义是：")]),t._v(" "),n("blockquote",[n("p",[t._v("Javascript引擎是一个专门处理Javascript脚本的虚拟机，一般会附带在网页浏览器之中--"),n("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/JavaScript%E5%BC%95%E6%93%8E",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS引擎 维基百科"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("因此，我们了解JS引擎在浏览器中的主要作用就是，"),n("strong",[t._v("解析JS代码、并运行代码")]),t._v("，那么它是怎么做到的呢？")]),t._v(" "),n("p",[t._v("如同我们人一样去认识一门语言，电脑也一样，当我们写了一行代码，JS引擎要识别出来，它同样去分析代码，然后确定执行，主要有以下几个步骤")]),t._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("词法分析，主要是"),n("strong",[t._v("分词(tokenize)")]),t._v(", 将JS代码比较关键词(如function、const、let等)，拆出来放到解析器里")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("语法分析,主要是解析(parse),主要用了预解析器和解析器")]),t._v(" "),n("ul",[n("li",[t._v("预解析器会判断哪些代码需要立即执行，哪些嗲吗不需要立即执行，需要立即执行的代码才会放到解析器里去解析")]),t._v(" "),n("li",[t._v("解析器，从词法分析获取关键词做标记，将代码生成一个抽象语法树，也叫AST语法树")])])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("生成AST语法树，AST语法树由解析器生成后，将会传递给到解释器")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("生成字节码，主要由解释器将AST语法树编译成字节码")])]),t._v(" "),n("li",[n("span",{staticStyle:{color:"blue"}},[t._v("执行代码,将字节码转成机器代码，以更快的速度在电脑中执行")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(1028),alt:"js解析"}})]),t._v(" "),n("p",[t._v("所以我们要模拟JS引擎要实现功能主要有以下几块")]),t._v(" "),n("ul",[n("li",[t._v("分词器，将JS关键词进行标记")]),t._v(" "),n("li",[t._v("解析器，生成AST语法树")]),t._v(" "),n("li",[t._v("解释器，执行AST语法树")])]),t._v(" "),n("h2",{attrs:{id:"词法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[t._v("#")]),t._v(" 词法分析")]),t._v(" "),n("blockquote",[n("p",[t._v("将源代码分解并组织成一组有意义的单词，这一过程即为词法分析(Token)")])]),t._v(" "),n("p",[t._v("词法分析的工作就是将一个长长的字符串识别出一个个的单词，这一个个单词就是Token，具体实现效果如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  经过词法分析会将上面拆分如下对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keyword"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"identifier"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assignment"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"literal"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"separator"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如果用途来显示的话，它应该是这个样子的")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1029),alt:"词法分析"}})]),t._v(" "),n("p",[t._v("根据上面的结果，那么词法分析的实践步骤应该如下")]),t._v(" "),n("ul",[n("li",[t._v("先分词，分词的逻辑使用正则表达式\n"),n("ul",[n("li",[t._v("先判断是否为关键词，如：运算符(+-*/=)、声明符(var、const、function)等。")]),t._v(" "),n("li",[t._v("如果是则执行拆词")]),t._v(" "),n("li",[t._v("接着遇到空格也拆词")]),t._v(" "),n("li",[t._v("遇到换行符或;也拆词")]),t._v(" "),n("li",[t._v("...还有符合条件判断也拆词")]),t._v(" "),n("li",[t._v('最终会获取到一个数组，["var", "a", "=", "1", ";"]')])])]),t._v(" "),n("li",[t._v("再判断该词属于哪个类型，如： var属于keyword关键字。")])]),t._v(" "),n("p",[t._v("利用Acron做词法分析，代码如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" acron "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'acorn'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 利用acorn库进行词法分析\n * @param {*} code 代码\n * @param {*} ecmaVersion ECMAScript的标准版本 \n * @returns \n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getToken "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ecmaVersion "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tokenObj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acron"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tokenizer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ecmaVersion"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        locations"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tokens "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" token "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tokenObj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" token"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        tokens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        token "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tokenObj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tokens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("const a= 1+1;")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终输出Token数组")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出如下对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键词Token所属类型")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"label"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"const"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析到的关键词所属的类型 为const")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keyword"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"const"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  关键字")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"const"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析到的 关键词Token")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键词的开始位置")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键词的结束位置 下一个位置是空白符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("h2",{attrs:{id:"语法解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法解析"}},[t._v("#")]),t._v(" 语法解析")]),t._v(" "),n("blockquote",[n("p",[t._v("将词法分析阶段生成的Token转换为抽象语法树(Abstract Syntax Tree)，这一过程称之为语法解析(Parsing)")])]),t._v(" "),n("p",[t._v("简单来说，就是利用Token标示符去生成AST语法树")]),t._v(" "),n("h3",{attrs:{id:"语法树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法树"}},[t._v("#")]),t._v(" 语法树")]),t._v(" "),n("p",[t._v("在语法解析前,我们需要对AST语法树有一个认知，即是：什么是AST语法树")]),t._v(" "),n("p",[t._v(":::tips\n抽象语法树(Abstract Syntax Tree),简称AST，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构\n:::\n用比较容易理解的话，"),n("span",{staticStyle:{color:"blue"}},[t._v("用一个树形结构去描述我们源代码，从而能让机器能更好识别我们所想要实现的功能")])]),t._v(" "),n("p",[t._v("目前市面上Javascript语言的AST语法树结构基本上都遵循"),n("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESTree语法树规范"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("这里说明一下ESTree语法树规范的起源，能让我们更容易理解语法解析的过程：\n:::tips\n使用不同工具构建的语法树可能会有不同的结构，如果大家都遵从同样的规范，那么相关联的生态链工具的开发更为轻松、明细。很早之前，FireFox浏览器所使用的Javascript引擎SpiderMonkey曾经提供了一个Javascript API,是的开发者可以直接调用SpiderMonkey的Javaascript的分析器。这个 API 所描述的 JavaScript 抽象语法树格式渐渐流行起来，如今成为 JavaScript AST 的通用描述。ESTree语法树规范 正是在此基础上建立起来的，它现在是社区对 JavaScript 抽象语法树构建时采用最广泛的规则，可以认为是社区推动的事实标准。众多基础设施开发者一起维护着这个规范，包括 Dave Herman（Mozilla 研究中心的首席研究员和策略总监）、 Nicholas C. Zakas（ESLint 的作者）、Ingvar Stepanyan（Acorn 的作者）、Mike Sherov 与 Ariya Hidayat（Esprima 的作者）以及 Babel.js 团队等。")]),t._v(" "),n("p",[t._v("ESTree语法树规范 的初始版本是基于 ES5 的[2]，后续的 ES6/ES7/ES8 等版本的规范，都只针对新增语言特性提出。\n:::\n"),n("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESTree语法树规范"),n("OutboundLink")],1),t._v("基于ECMAScript标准去描述不同标准的AST树结构，具体如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点对象  下面这个版本属于ES2015的规范")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    loc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SourceLocation "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nextend "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sourceType"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    body"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" Statement "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ImportOrExportDeclaration "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IfStatement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <: 标识前者是后者的子集 即是继承的关系")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"IfStatement"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    test"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    consequent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    alternate"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("因此了解JS的AST语法树结构，需要对ESTree规范有了解，它分别定义不同类型节点的数据结构，拿几种常见的做一下介绍，具体如下所示：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Program,一个完整的程序源码树，就是树的根节点，因此也属于Node类型")])]),t._v(" "),n("li",[n("p",[t._v("Node,语法树的基础节点")]),t._v(" "),n("ul",[n("li",[t._v("Function，函数声明或表达式，继承节点Node")]),t._v(" "),n("li",[t._v("Statement，代码内容，标识任何声明，继承节点Node\n-Declaration 声明节点")]),t._v(" "),n("li",[t._v("Expression， 表达式，标识任何声明，继承节点Node\n-Pattern，解构绑定和赋值节点，继承节点Node")])])]),t._v(" "),n("li",[n("p",[t._v("Identifier,标识符，如：变量名、函数名")])]),t._v(" "),n("li",[n("p",[t._v("Literal,字面量，对应Javascript，就是基本值，例如布尔值true,数字200、字符串'this is a string'")])])]),t._v(" "),n("p",[t._v("一个AST语法的组成结构大概如下")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("Program\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- body: Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 代码主体\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Function // 函数声明\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Statement // 代码内容\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Declaration // 变量声明\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Expression // 表达式\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Literal\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-- Identifier\n")])])]),n("p",[t._v("还需要解答一个问题，就是在AST语法树中，如何判断一个节点的完整性呢?")]),t._v(" "),n("p",[t._v("按照ESTree的规范：遇到一个空节点（比如：换行/分号/结构体结束符}]等），则拆成一个完整的节点。")]),t._v(" "),n("h3",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),n("p",[t._v("弄明白AST语法树的数据结构，接下来就是如何将之前词法分析的Token数组解析成语法树结构，解析流程图(Acron.js实现)如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1030),alt:"语法解析实现原理"}})]),t._v(" "),n("p",[t._v("利用Acron做发育解析，代码如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("function sum(a, b){return a + b;};const a = sum(1,2)")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" acron "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'acorn'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acron"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("最终得到结构如下：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Program'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  start"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  end"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  body"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" Node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'FunctionDeclaration'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       start"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       end"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       expression"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       generator"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       async"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       params"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       body"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     Node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EmptyStatement'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     Node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'VariableDeclaration'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       start"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       end"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       declarations"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       kind"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'const'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sourceType"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"解释器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释器"}},[t._v("#")]),t._v(" 解释器")]),t._v(" "),n("blockquote",[n("p",[t._v("解释器，就是遍历AST语法树，然后根据Node节点类型，去执行或计算每个节点")])]),t._v(" "),n("p",[t._v("这里实现一个JS解释器，需要对AST语法树Node节点每个类型做区分判断，主要有以下几种")]),t._v(" "),n("ul",[n("li",[t._v("变量")]),t._v(" "),n("li",[t._v("作用域以及作用域链")]),t._v(" "),n("li",[t._v("条件判断")]),t._v(" "),n("li",[t._v("For循环，其中的break和continue")]),t._v(" "),n("li",[t._v("函数部分Function")]),t._v(" "),n("li",[t._v("生成器Generator")]),t._v(" "),n("li",[t._v("异步Async")])]),t._v(" "),n("p",[t._v("因此我们需要几个类去保存相关的值")]),t._v(" "),n("ul",[n("li",[t._v("Scope，作用域类，作用域内的值以及作用域链(当前作用域可以找到父级作用域链)")]),t._v(" "),n("li",[t._v("Visitor,AST树Node节点处理类，里面有函数 visitiNode(node, scope),用来处理对应node类型，其中VISITOR是所有类型函数的Map对象，用来快速查询")]),t._v(" "),n("li",[t._v("Variable,变量存储类,用来存储变量类型和值")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 遍历AST语法树，并执行对应的处理函数\n * @param node\n * @param scope\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("visitNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VISITOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VISITOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"变量和作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量和作用域"}},[t._v("#")]),t._v(" 变量和作用域")]),t._v(" "),n("p",[t._v("在JavaScript中，对变量的生命通常是绑定在作用域中的，而作用域分为以下几种：")]),t._v(" "),n("ul",[n("li",[t._v("全局作用域，全局作用域中仅存在一处，即为最上级的环境")]),t._v(" "),n("li",[t._v("函数作用域,函数存在并执行时，内存存储函数作用域")]),t._v(" "),n("li",[t._v("块级作用域，每个block块{}都可产生作用域，如if for while 等")])]),t._v(" "),n("p",[t._v("我们举个例子，以var a = 1;为例,我们需要哪些代码，才能实现从AST树解析，将变量a被声明在全局变量作用域中，具体步骤如下图")]),t._v(" "),n("p",[n("img",{attrs:{src:a(1031),alt:"变量和作用域"}})]),t._v(" "),n("p",[t._v("这里实现一个作用域Scope类，参考代码如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scope")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * \n     * @param {*} type \n     * @param {*} parent \n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父级作用域")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作用域类型 Global, Function, Block")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("targetScope "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前作用域")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 变量声明方法,变量已定义则抛出语法错误异常\n     * @param {*} kind 变量类型\n     * @param {*} rawName  变量名\n     * @param {*} value 变量值\n     * @returns \n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("declare")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("kind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("targetScope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rawName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"上下文this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文this"}},[t._v("#")]),t._v(" 上下文This")]),t._v(" "),n("p",[t._v("上下文的this对象其实指的就是当前作用域，然而我们了解过JS中的this是可以改变的，如：")]),t._v(" "),n("ul",[n("li",[t._v("call()、bind()、apply()等函数，当执行到相关函数的时候，需要将传递进来的scope的替换成当前的scope")]),t._v(" "),n("li",[t._v("ES6中的剪头函数等，this指向上一级")])]),t._v(" "),n("h3",{attrs:{id:"其他类型解释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他类型解释"}},[t._v("#")]),t._v(" 其他类型解释")]),t._v(" "),n("h4",{attrs:{id:"条件判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[t._v("#")]),t._v(" 条件判断")]),t._v(" "),n("p",[t._v("IfStatement,里面有属性: test为判断条件，consequent为条件成立时执行的语句，alternate为条件不成立时执行的语句，参考代码如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// visitNode会执行AST语法树节点函数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consequent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alternate "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" testValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("visitNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("consequent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("visitNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("consequent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("visitNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("其他部分逻辑就不会在这里一一描述，具体Node类型都有自己的判断逻辑，因此想要了解完整逻辑，可以到完整源码里查看，注解都十分清晰。")]),t._v(" "),n("p",[t._v("完整源码地址在："),n("a",{attrs:{href:"https://github.com/qiubohong/qiubohong.github.io/tree/master/code/jsengine/src/interpreter/index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/qiubohong/q…"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("本文涉及的东西有点多，花了好几天时间才弄明白，因此有些知识点在这里做一下小总结：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("JS引擎是有三部分组成的，分别是：词法分析,语法解析和解释器")])]),t._v(" "),n("li",[n("p",[t._v("词法解析和语法解析，最终的目标是生成符合ESTree规范的AST语法树")])]),t._v(" "),n("li",[n("p",[t._v("解释器的作用就是依据AST语法树去执行相关逻辑，输出所需要的最终结果")]),t._v(" "),n("ul",[n("li",[t._v("比较重要的部分在于变量、作用域和作用域链的实现")]),t._v(" "),n("li",[t._v("其他部分则是依据对应ECMAScript 规范实现对应逻辑皆可")])])])]),t._v(" "),n("h2",{attrs:{id:"资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/front-end/JavaScript/browser-eventLoop.html"}},[t._v("js事件循环")])],1),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7205517870976270394#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("用JS实现一个JS引擎竟如此简单"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);