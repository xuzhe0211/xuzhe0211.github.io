(window.webpackJsonp=window.webpackJsonp||[]).push([[807],{2948:function(t,s,a){"use strict";a.r(s);var e=a(46),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("LF和CRLF是什么")]),t._v(" "),a("p",[t._v("CRLF是carriage return line feed的缩写，中文意思是换行")]),t._v(" "),a("p",[t._v("LF是line feed的缩写，中文意思也是换行")]),t._v(" "),a("p",[t._v("它们都是文本换行的方式")])]),t._v(" "),a("li",[a("p",[t._v("LF和CRLF区别")]),t._v(" "),a("p",[t._v('CRLF: "\\r\\n"，window系统环境下的换行方式')]),t._v(" "),a("p",[t._v("LF: '\\n'，linux系统环境下的换行方式")])])]),t._v(" "),a("p",[t._v("其实没啥区别")]),t._v(" "),a("h2",{attrs:{id:"git-操作中crlf和lf冲突的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-操作中crlf和lf冲突的问题"}},[t._v("#")]),t._v(" Git 操作中crlf和lf冲突的问题")]),t._v(" "),a("p",[t._v("多人参与项目开发的时候，经常会遇到代码格式化不一致，在提交的时候出现很多冲突的情况。其中换行符冲突就是一种，在不同的系统平台上是不一样的。NIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是 0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF） 作为换行符。所以会出现使用mac的开发者修改的代码中是lf换行，windows用户使用的crlf换行符，总是互相影响。还有一个原因是，git默认配置了autocrlf为true，也就是说默认所有代码都会被提交成了crlf，但是如果不同开发者自己配置的autocrlf配置不一致（比如，input或者false），就会出现总是互相覆盖的情况。以下是解决换行符冲突的解决方案：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("编辑器统一")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("修改git全局配置，禁止git自动将lf转换成crlf，命令")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("修改编辑器的用户配置，例如vscode")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'files.eol'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件换行使用lf方法")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("git方式统一")]),t._v(" "),a("p",[t._v("git提交的时候，文件中的换行符必须是LF,如果不是不能提交")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交时转换为LF,检出时不转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.autocrlf input\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拒绝提交包含混合换行符的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.safecrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("EditorConfig")]),t._v(" "),a("p",[t._v("主流编码器都支持EditorConfig，配置end_of_line后，你编辑的代码会自动转化为对应的换行符。当然你需要将autocrlf关闭，防止再次被转换成其他格式")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取值包括 crlf,lf,cr")]),t._v("\nend_of_line "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lf\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交检出均不转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.autocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("prettier")]),t._v(" "),a("p",[t._v("prettier是目前非常流行的代码格式化工具，提供了endOfLine来支持格式化换行符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"endOfLine"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lf"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("因为我们现有的项目都已经支持prettier，自然就使用了【husky+lint-staged+prettier】的方式，来支持所有代码格式化成 lf 换行符。")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/dahe1989/p/10784581.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git操作中crlf和lf冲突问题"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);