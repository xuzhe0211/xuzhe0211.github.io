(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{1690:function(n,e,s){n.exports=s.p+"assets/img/20190104182337486.9847e2c5.png"},1691:function(n,e,s){n.exports=s.p+"assets/img/20190104182604428.9edb0b2f.png"},1692:function(n,e,s){n.exports=s.p+"assets/img/20190104182803476.4b102742.png"},1693:function(n,e,s){n.exports=s.p+"assets/img/3176782536-5bf28a9d10376_fix732.fc29ba7a.png"},1694:function(n,e,s){n.exports=s.p+"assets/img/562969317-5bf28aa684841_fix732.af5a137a.png"},2731:function(n,e,s){"use strict";s.r(e);var t=s(46),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("这个选项是webpack4新增的，主要是用来自定义一些优化打包策略11")]),n._v(" "),t("h2",{attrs:{id:"minimizer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimizer"}},[n._v("#")]),n._v(" minimizer")]),n._v(" "),t("p",[n._v("minimize默认是true,效果就是压缩js代码。在production模式，该配置会默认认为我们压缩混淆代码，但这显然满足不了我们对于优化代码的诉求")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var UglifyJsPlugin = require('uglifyjs-webpack-plugin');\nvar OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\n\nmodule.exports = {\n    optimization:  {\n        minimizer: [\n            // 自定义js优化配置，将会覆盖默认配置\n             new UglifyJsPlugin({\n                exclude: /\\.min\\.js$/, // 过滤掉以\".min.js\"结尾的文件，我们认为这个后缀本身就是已经压缩好的代码，没必要进行二次压缩\n                cache: true,\n                parallel: true, // 开启并行压缩，充分利用cpu\n                sourceMap: false,\n                extractComments: false, // 移除注释\n                uglifyOptions: {\n                compress: {\n                    unused: true,\n                    warnings: false,\n                    drop_debugger: true\n                },\n                output: {\n                    comments: false\n                }\n                }\n            }),\n            // 用于优化css文件\n            new OptimizeCssAssetsPlugin({\n                assetNameRegExp: /\\.css$/g,\n                cssProcessorOptions: {\n                safe: true,\n                autoprefixer: { disable: true }, \n                mergeLonghand: false,\n                discardComments: {\n                    removeAll: true // 移除注释\n                }\n                },\n                canPrint: true\n            })\n        ]\n    }\n}\n")])])]),t("p",[n._v("UglifyJsPlugin经常用到过滤掉本身已经是压缩的js文件，exclude: /.min.js$/能够提升我们的编译效率以及避免二次混淆压缩而造成的未知bug。")]),n._v(" "),t("p",[n._v("ptimizeCssAssetsPlugin这款插件主要用来优化css文件的输出，默认使用cssnano，其优化策略主要包括：摒弃重复的样式定义、砍掉样式规则中多余的参数、移除不需要的浏览器前缀等。这段配置autoprefixer: {disable: true},禁用掉cssnano对于浏览器前缀的处理")]),n._v(" "),t("h2",{attrs:{id:"runtimechunk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtimechunk"}},[n._v("#")]),n._v(" runtimeChunk")]),n._v(" "),t("p",[n._v("默认为false, runtime相关的代码(各个模块之间的引用和加载的逻辑)内嵌入每个entry。")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("true: 对于每个entry会生成runtime-${entrypoint.name}的文件")]),n._v(" "),t("p",[t("img",{attrs:{src:s(1690),alt:"runtimeChunk true"}})])]),n._v(" "),t("li",[t("p",[n._v("'single':会生成一个唯一单独的runtimer.js,就是manifest.")]),n._v(" "),t("p",[t("img",{attrs:{src:s(1691),alt:"runtimeChunk single"}})])]),n._v(" "),t("li",[t("p",[n._v("multiple: 和true一致")])]),n._v(" "),t("li",[t("p",[n._v("name{}: 自定义runtime文件的name")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('runtimeChunck: {\n    name: () => "manifest"\n}\n')])])]),t("p",[t("img",{attrs:{src:s(1692),alt:"runtimeChunk name"}})])])]),n._v(" "),t("p",[n._v("我们可以配合InlineManifestWepackPlugin插件将运行代码直接插入html文件中，因为这段代码非常少，这样做可以避免一次请求的开销，但是新版插件的配置和之前的有些不太一样，下面详细讲解一下如何配置")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var HtmlWepackPlugin = require('html-webpack-plugin');\nvar InlineManifestWebpackPlugin = require('inline-manifest-webpack-plugin');\n\nmodule.export = {\n    entry: {\n        app: 'src/index.js'\n    },\n    optimization:  {\n        runtimeChunk: 'single'\n        // 等价于\n        // runtimeChunk:  {\n            // name: 'runtime'\n        // }\n    }，\n    plugins: [\n        new HtmlWepackPlugin({\n            title: 'fle-cli',\n            filename: 'index.html',\n            template: 'xxx',\n            inject: true,\n            chunks: ['runtime', 'app'], // 将runtime插入html中\n            chunksSortMode: 'dependency',\n            minify: {/* */}\n        }),\n        new InlineManifestWebpackPlugin('runtime')\n    ]\n}\n")])])]),t("p",[n._v("这里有一点要注意，InlineManifestWebpackPlugin插件的顺序一定要在HtmlWebpackPlugin之后，否则导致编译失败")]),n._v(" "),t("h2",{attrs:{id:"noemitonerrors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noemitonerrors"}},[n._v("#")]),n._v(" noEmitOnErrors")]),n._v(" "),t("p",[n._v("默认为true,编译错误的时候是否不生产资源")]),n._v(" "),t("h2",{attrs:{id:"splitchunks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks"}},[n._v("#")]),n._v(" splitChunks")]),n._v(" "),t("p",[n._v("主要就是根据不同的策略来分割打包出来的bundle.")]),n._v(" "),t("p",[n._v("默认配置")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("splitChunks: {\n    chunks: \"async\",\n    minSize: 30000,\n    minChunks: 1,\n    maxAsyncRequests: 5,\n    maxInitialRequests: 3,\n    automaticNameDelimiter: '~',\n    name: true,\n    cacheGroups: {\n        vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            priority: -10\n        },\n        default: {\n            minChunks: 2,\n            priority: -20,\n            reuseExistingChunk: true\n        }\n    }\n}\n")])])]),t("h3",{attrs:{id:"chunks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chunks"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"chunks"}},[n._v("chunks")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 入口文件引入\nimport './a.js' // 同步加载\nimport ('./b.js') // 异步加载\n// b.js引入\nimport 'vue'\n")])])]),t("ul",[t("li",[t("p",[n._v("默认'async'")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("splitChunks: {\n  chunks: 'async' // 分割异步打包的代码\n}\n")])])]),t("p",[n._v("打包出b和vue两个chunk\n"),t("img",{attrs:{src:s(1693),alt:"chunk"}})])]),n._v(" "),t("li",[t("p",[n._v("all")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("splitChunks: {\n    chunks: 'all', // 同时分割同步和异步代码，推荐\n    cacheGroup: { // 默认的规则不会打包，需要单独定义\n        a:  {\n            test: /a\\.js/,\n            chunks: 'all',\n            name: 'a', \n            enforce: true\n        }\n    }\n}\n")])])]),t("p",[t("img",{attrs:{src:s(1694),alt:"chunk"}})])]),n._v(" "),t("li",[t("p",[n._v("initial")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('splitChunks: {\n    chunks: \'initial\', // 也会同事打包同步和异步，但是异步内如的引入不再考虑，直接打包在一起，会将vue和b的内容打包成chunk，\n    cacheGroup: { // 默认的规则不会打包，需要单独定义\n        test: /a\\.js/,\n        chunks: "all",\n        name: "a",\n        enforce: true\n    }\n}\n')])])])])]),n._v(" "),t("h3",{attrs:{id:"name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"name"}},[n._v("name")])]),n._v(" "),t("p",[n._v("分割的js名称，默认为true,返回${cacheGroup的key} ${automaticNameDelimiter} ${moduleName},可以自定义")]),n._v(" "),t("h3",{attrs:{id:"minchunks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minchunks"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"minchunks"}},[n._v("minChunks")])]),n._v(" "),t("p",[n._v("最小公共模块的次数，默认为1")]),n._v(" "),t("h3",{attrs:{id:"minsize-maxsize-maxasyncrequests-按需加载时候最大的并行请求数-maxinitialrequests-一个入口最大的并行请求数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minsize-maxsize-maxasyncrequests-按需加载时候最大的并行请求数-maxinitialrequests-一个入口最大的并行请求数"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"maxsize"}},[n._v("minSize,maxSize,maxAsyncRequests（按需加载时候最大的并行请求数）,maxInitialRequests（一个入口最大的并行请求数）")])]),n._v(" "),t("p",[n._v("都为字面意思，一般不建议改")]),n._v(" "),t("h3",{attrs:{id:"cachegroups"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cachegroups"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"cachegroups"}},[n._v("cacheGroups")])]),n._v(" "),t("p",[n._v("缓存策略，默认设置了分割node_modules和公用模块。内部的参数可以覆盖外部的参数")]),n._v(" "),t("p",[n._v("test 正则匹配文件")]),n._v(" "),t("p",[n._v("priority 优先级")]),n._v(" "),t("p",[n._v("reuseExistingChunk是否复用存在的chunk")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("cacheGroup: {\n    a: {\n        test: /a\\.js/, // 匹配规则\n        minChunk: 2, // 重写公用chunks的次数\n        chunks： 'all',\n        name: 'a', // 重写文件名称\n        enforce: true // 强制生成\n    }\n}\n")])])]),t("p",[n._v("比较优雅的分离打包配置")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("splitChunks: {\n    cacheGroups: {\n        vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            name: 'vendors',\n            minSize: 30000,\n            minChunks: 1,\n            chunks: 'intial',\n            priority: 1, // 该配置项是设置处理的优先级，数值越大越优先处理\n        }，\n        commons: {\n            test: /[\\\\/]src[\\\\/]common[\\\\/]/,\n            name: 'commons',\n            minSize: 30000,\n            minChunks: 3,\n            chunks: 'initial',\n            priority: -1,\n            reuseExistingChunk: true // 这个配置允许我们使用已经存在的代码块\n        }\n    }\n}\n")])])]),t("p",[n._v("首先是将node_modules的模块分离出来，这点就不在累述了。异步加载的模块将会继承默认配置，这里我们就不需要二次配置了。")]),n._v(" "),t("p",[n._v("第二点是分离出共享模块，笔者认为一个优雅的项目结构，其公共代码(或成为可复用的代码)应该是放置于同一个根目录下的，基于这点我们可以将src/common中的公用代码提取出来")]),n._v(" "),t("h2",{attrs:{id:"资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[n._v("#")]),n._v(" 资料")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000017066322",target:"_blank",rel:"noopener noreferrer"}},[n._v("optimization参考"),t("OutboundLink")],1)]),n._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/weixin_43678786/article/details/85788759",target:"_blank",rel:"noopener noreferrer"}},[n._v("webpack的optimization配置"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);