(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{1453:function(t,v,_){t.exports=_.p+"assets/img/29.bdd9af3b.png"},1454:function(t,v,_){t.exports=_.p+"assets/img/30.f333a39b.png"},1455:function(t,v,_){t.exports=_.p+"assets/img/32.f7d74d99.png"},1456:function(t,v,_){t.exports=_.p+"assets/img/33.86744367.png"},1457:function(t,v,_){t.exports=_.p+"assets/img/34.9309de44.png"},1458:function(t,v,_){t.exports=_.p+"assets/img/35.ef4c5782.png"},1459:function(t,v,_){t.exports=_.p+"assets/img/36.ee01ec06.png"},1460:function(t,v,_){t.exports=_.p+"assets/img/37.6b93669b.png"},2617:function(t,v,_){"use strict";_.r(v);var e=_(46),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),e("p",[t._v("我们经常使用Chrome Dev Tools 来开发调试，但是很少知道怎么利用他来分析页面性能，这篇文章，我将详细说明怎样利用 Chrome Dev Tools 进行页面性能分析及性能报告数据如何解读")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1453),alt:"chrome Dev Tools"}})]),t._v(" "),e("p",[t._v("上图是Chrome Dev Tools 的一个截图，其中，我认为能用于进行页面性能快速分析的主要是图中圈出来的几个模块功能，这里简单介绍一下")]),t._v(" "),e("ul",[e("li",[t._v("Network: 页面中各种资源请求的情况，这里能看到资源的名称、状态、使用的协议(http1/http2/quic...)、资源类型、资源大小、资源时间线等情况")]),t._v(" "),e("li",[t._v("Performance: 页面各项性能指标的火焰图，这里能看到白屏时间、FPS、资源加载时间线、longtask、内存变化曲线等等信息")]),t._v(" "),e("li",[t._v("Memory：可以记录函数的耗时情况，方便找出耗时较多的函数")]),t._v(" "),e("li",[t._v("Layers:展示页面中的分层情况")])]),t._v(" "),e("h2",{attrs:{id:"分析步骤说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析步骤说明"}},[t._v("#")]),t._v(" 分析步骤说明")]),t._v(" "),e("p",[e("span",{staticStyle:{color:"red"}},[t._v("首先，我们在分析的时候，建议使用隐身模式打开页面，排除一些插件等因素对页面性能情况的影响。然后，我们把页面缓存勾选去掉，要侧 disabled cache 的情况，在把网络情况调整一下，我们用电脑打开页面时候一般都连着wifi等，要更真实一些去测页面的性能，还是把网络调到3G等情况比较好")])]),t._v(" "),e("p",[e("img",{attrs:{src:_(1454),alt:"调试"}})]),t._v(" "),e("p",[t._v("上图，从左到右分别代表的是")]),t._v(" "),e("ol",[e("li",[t._v("手动开始记录，开始后需要手动结束")]),t._v(" "),e("li",[t._v("自动重启页面，并记录整个页面加载的过程。这个是最常用的，一般大概分析页面性能的时候都是点这个就够了")]),t._v(" "),e("li",[t._v("清除性能录制的记录")]),t._v(" "),e("li",[t._v("上传页面性能录制的数据")]),t._v(" "),e("li",[t._v("下载页面性能录制的数据")]),t._v(" "),e("li",[t._v("选择要展示的性能记录。你可能进行了多次分析，这里可以切换去看每次的结果")]),t._v(" "),e("li",[t._v("是否捕捉页面加载过程的截图，这个一般都要勾选")]),t._v(" "),e("li",[t._v("是否记录内存变化，这个一般都要勾选")]),t._v(" "),e("li",[t._v("垃圾回收，点击了即进行一次垃圾回收")])]),t._v(" "),e("p",[t._v("这里，我以京东的一个页面为例,勾选 disable cache,网络情况为 Fast 3G，点击2，然后就结果来说明一下，应该如何理解性能结果，找出优化点。")]),t._v(" "),e("h2",{attrs:{id:"从网络面板分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从网络面板分析"}},[t._v("#")]),t._v(" 从网络面板分析")]),t._v(" "),e("p",[t._v("我们先看看我网络面板，看看都有哪些信息")]),t._v(" "),e("p",[e("img",{attrs:{src:_(350),alt:"网络"}})]),t._v(" "),e("p",[e("strong",[t._v("从图中可以看出，页面中又的一些性能优化手段有")])]),t._v(" "),e("ol",[e("li",[t._v("页面直出,输出 https://wq.jd.com/wxportal/index_v6,页面加载回来的 document 就是一个一个渲染好的 html页面")]),t._v(" "),e("li",[t._v("图片优化，部署在不同的CDN域名下，用webp/dpg等格式，图片切割等")]),t._v(" "),e("li",[t._v("http协议有部分采用http2,多路复用，加快资源加载")]),t._v(" "),e("li",[t._v("小log使用base42来处理")]),t._v(" "),e("li",[t._v("按需加载,菜单先加载第一屏的图片，滑动到第二屏在加载第二屏的图表")])]),t._v(" "),e("p",[e("strong",[t._v("而个人认为，还可以考虑用上的一些性能优化手段有")])]),t._v(" "),e("ol",[e("li",[t._v("html 的内容大小为138kb,Content Download 的时间为七百多毫秒，感觉可以拆分一下页面，废一二屏的内容分开加载")]),t._v(" "),e("li",[t._v("TTFB(Time To First Byte)为五百多毫秒，在下载第一个字节之前等待的时间越久，不过这里主要是用户网络情况影响，可能做的比较少。如DNS解析优化，减少后端服务处理时间等。")]),t._v(" "),e("li",[t._v("合并雪碧图,大轮播图下面的菜单分类哪里的图片，可以用一张雪碧图来结合这些图表")]),t._v(" "),e("li",[t._v("顶部轮播图,在首次加载时，可以先加载第一帧的图片，后面急诊延后一下")]),t._v(" "),e("li",[t._v("图片较多的话，可以都用http2协议")])]),t._v(" "),e("h2",{attrs:{id:"从性能面板分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从性能面板分析"}},[t._v("#")]),t._v(" 从性能面板分析")]),t._v(" "),e("p",[t._v("切到 Performance 面板，点击自动重启页面，并记录整个页面加载的过程，然后来分析一下")]),t._v(" "),e("h3",{attrs:{id:"网络-白屏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络-白屏"}},[t._v("#")]),t._v(" 网络&&白屏")]),t._v(" "),e("p",[t._v("性能面板，有很多的参数，我们哟啊看一些比较常见的。首先看白屏时间和网络加载情况")]),t._v(" "),e("p",[e("img",{attrs:{src:_(350),alt:"网络&&白屏"}})]),t._v(" "),e("p",[t._v("上图，我们可以看几点信息：")]),t._v(" "),e("ol",[e("li",[t._v("本次页面加载的白屏时间约为 1000ms")]),t._v(" "),e("li",[t._v("FPS曲线没有标红,如果有很多标红的则说明页面渲染存在渲染卡顿的地方")]),t._v(" "),e("li",[t._v("从网络资源加载情况来看，图片没有启用http2，因此每次可以同时加载的图片数有限，违背加载的图片有等待过程")]),t._v(" "),e("li",[t._v("资源的加载时间也可以看到，比如轮播的背景图加载了近700毫秒，时间有点长")])]),t._v(" "),e("p",[t._v("另外，我们可以看一下资源加载有没有空白期，虽然上图没有，但是如果资源加载之间存在空白期，说明没有充分利用资源加载空间时间，可以调整一下")]),t._v(" "),e("h2",{attrs:{id:"火焰图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#火焰图"}},[t._v("#")]),t._v(" 火焰图")]),t._v(" "),e("p",[t._v("火焰图,主要在Main面板中，是我们分析具体函数耗时最常看的面板，我们来看一下，如图")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1455),alt:"火焰图"}})]),t._v(" "),e("p",[t._v("首先，面板中会有很多的Task，如果是耗时长的Task,其右上角会标红(图中灭有，说明页面首屏的逻辑处理分配的还不错)，这个时候，我们可以选中表中的task,然后放大(选中，滑动鼠标可放大)，看其具体的耗时点")]),t._v(" "),e("p",[e("span",{staticStyle:{color:"red","font-weight":"bold"}},[t._v("放大后，这里可以看到都在做哪些操作，那些函数耗时了多少，这里代码有压缩，看到的是压缩后的函数名。然后我点击下一个函数，在面板最下面，就会出现代码的信息，在哪个函数，耗时多少，在哪个文件上的第几行灯。这样我们就很方便的定位到耗时函数了")])]),t._v(" "),e("p",[t._v("还可以横向切换tab，看他的调用栈等情况，更方便的找到对应的代码。具体大家可以试试")]),t._v(" "),e("h3",{attrs:{id:"时间线-内容情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间线-内容情况"}},[t._v("#")]),t._v(" 时间线&&内容情况")]),t._v(" "),e("p",[t._v("在 Timings 的区域,我们可以看到本次加载的一些关键时间，分别有：")]),t._v(" "),e("ul",[e("li",[t._v("FCP: First Contentful Paint")]),t._v(" "),e("li",[t._v("LCP: Largest Contentful Paint")]),t._v(" "),e("li",[t._v("FMP: First Meaningful Paint")]),t._v(" "),e("li",[t._v("DCL: DOMContentLoaded Event")]),t._v(" "),e("li",[t._v("L: Onload Event")])]),t._v(" "),e("p",[t._v("我们可以选取(选择从白屏到有内容的区域，代表本次的页面加载过程)，可以对找看一下上面的时间，截图如下")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1456),alt:"时间线&内容情况"}})]),t._v(" "),e("p",[t._v("另外，我们可以看到页面中的内存使用情况，比如 JS Heap(堆),如果曲线一直在增长，则说明存在内存泄露，从图中可以看出，相当长的一段时间，内存曲线都是没有下降的，这里是有发生内存泄露的可能的，在Onload之后，内存才得到到释放。更多内存泄露产生的原因及分析方法，可以参照我的这篇文章"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI0MzIyMDM5Ng==&mid=2649825801&idx=1&sn=0da05967972338e3c16f30994f21a7d9&chksm=f175e8cac60261dc790785c885d827272755592dc342f51ed141863ea33363f43eeecee63bf1&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Chrome 浏览器垃圾回收机制与内存泄漏分析》"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("span",{staticStyle:{color:"blue"}},[t._v("最下方就是页面的一个整体耗时概况，如果 Scripting 时间过长，则说明 js执行的逻辑太多，可以考虑优化js，如果渲染时间过长，则考虑优化渲染过程。如果空间时间过多，则可以考虑充分利用起来。比如把一些上报操作放到页面空闲时间在上报等。")])]),t._v(" "),e("h2",{attrs:{id:"其他面板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他面板"}},[t._v("#")]),t._v(" 其他面板")]),t._v(" "),e("p",[t._v("以上就是性能面板可以看的一些信息。另外，我们可以借助 Layers面板来查看页面分层情况的3D视图，Rendering面板(点击more tools->Rendering即可打开)，勾选Layer Bordersk可以看到复合层、RenderLayer区域，可以帮助分析动画卡顿、是否开启GPU加速等问题，而 Memory 面板 和 JavaScript Profiler 面板主要是分析内存泄露的，这里就不说了，可以看我另一篇文章"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI0MzIyMDM5Ng==&mid=2649825801&idx=1&sn=0da05967972338e3c16f30994f21a7d9&chksm=f175e8cac60261dc790785c885d827272755592dc342f51ed141863ea33363f43eeecee63bf1&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Chrome 浏览器垃圾回收机制与内存泄漏分析》"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"用audits工具分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用audits工具分析"}},[t._v("#")]),t._v(" 用Audits工具分析")]),t._v(" "),e("p",[t._v("Audits其实就是 LightHouse, LightHouse 是Google开源的一个自动化测试工具，它通过一系列的规则来对网页进行评估分析，最终给出一份评估报告。它的面板是这样的：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1457),alt:"LightHouse"}})]),t._v(" "),e("h3",{attrs:{id:"整体情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体情况"}},[t._v("#")]),t._v(" 整体情况")]),t._v(" "),e("p",[t._v("Audits 主要从5个方面来给网页打分，当然你也可以去掉某些方面的评估。在选择了设备、评估方面、网络情况等选项后，点击 Run Audits，我们将会得到一份报告")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1458),alt:"Audits"}})]),t._v(" "),e("p",[t._v("上图是一个总体报告，可以看出，这个页面的性能不太合格。当然一次的测试也说明不了什么问题，只能做个参考。我们看它的性能指标分别有：")]),t._v(" "),e("ul",[e("li",[t._v("First Contentful Paint：内容首次开始绘制。")]),t._v(" "),e("li",[t._v("First Meaningful Paint：可以简单理解为用户看到网页主要内容的时间，分数越低，页面显示其主要内容的速度就越快。图中例子，网页首次有效绘制时间为2.5s。")]),t._v(" "),e("li",[t._v("Speed Index：速度指标是一个页面加载性能指标，向你展示明显填充页面内容的速度，此指标的分数越低越好。")]),t._v(" "),e("li",[t._v("First CPU Idle：首次 CPU 空闲时间")]),t._v(" "),e("li",[t._v("-Time to Interactive：可互动时间，页面中的大多数网络资源完成加载并且CPU在很长一段时间都很空闲的所需的时间。此时可以预期cpu非常空闲，可以及时的处理用户的交互操作。")]),t._v(" "),e("li",[t._v("Max Potential First Input Delay：最大的输入延迟时间，输入响应能力对用户如何看待你应用的性能起着关键作用。应用有 100 毫秒的时间响应用户输入。如果超过此时间，用户就会认为应用反应迟缓。")])]),t._v(" "),e("p",[t._v("这些时间，都可以点击图中红框切换展示方式，会附上对应的时间解释，然后可以点击 Learn more 来查看详细的指标介绍。在文档中，每一项指标都会明确的分为三个部分：为什么说此审查非常重要；如何通过此审查；如何实现此审查；")]),t._v(" "),e("h3",{attrs:{id:"性能指标优化建议解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能指标优化建议解读"}},[t._v("#")]),t._v(" 性能指标优化建议解读")]),t._v(" "),e("p",[e("strong",[t._v("性能建议主要分为3类， Opportunities 可优化项、手动诊断项、通过的审查项")]),t._v("。本次的例子如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(1459),alt:"性能优化指标"}})]),t._v(" "),e("p",[t._v("图中的每一项都可以展开来看明细解释，其中：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("可优化项有2个建议")]),t._v(" "),e("ol",[e("li",[t._v("延迟会阻塞渲染的资源加载，这里是一个 navfoot.6bf68af7.css")]),t._v(" "),e("li",[t._v("延迟视口外的图片加载，这里列举了不必要加载的图片(和我上文提的优化建议一致，哈哈)\n这项里面的内容指的是LightHouse发现的一些可以直接优化的点，你可以对应这些点来进行优化。")])])]),t._v(" "),e("li",[e("p",[t._v("手动诊断项有6个建议")]),t._v(" "),e("ul",[e("li",[t._v("最小化主线程工作")]),t._v(" "),e("li",[t._v("减少JavaScript执行时间")]),t._v(" "),e("li",[t._v("避免DOM太大")]),t._v(" "),e("li",[t._v("通过有效的缓存策略缓存一些静态资源")]),t._v(" "),e("li",[t._v("避免链接关键请求")]),t._v(" "),e("li",[t._v("保持低请求数量和小传输大小\n这些项目表示LightHouse并不能替你决定当前是好是坏，但是把详情列出来，由你手动排查每个项目的情况")])])]),t._v(" "),e("li",[e("p",[t._v("通过的审查项")]),t._v(" "),e("p",[t._v("这里列出的都是做的好的地方，本文例子共有16条，不过即使做的好，依然值得我们进去仔细看一下，因为像所有条目一样，这里的每个条目也有一个showmore，我们可以点进去仔细学习背后的知识和原理！")])])]),t._v(" "),e("h3",{attrs:{id:"accessibility辅助功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#accessibility辅助功能"}},[t._v("#")]),t._v(" Accessibility辅助功能")]),t._v(" "),e("p",[t._v('辅助功能指的是那些可能超出"普通"用户范围之外的用户的体验，他们以不同于你期望的方式访问你的网页或进行交互，本文的例子建议如下图')]),t._v(" "),e("p",[e("img",{attrs:{src:_(1460),alt:"Accessibility辅助功能"}})]),t._v(" "),e("p",[t._v("辅助功能类别测试屏幕阅读器的能力和其他辅助技术是否能在页面中正常工作。例如：按元素来使用属性，标签使用是否规范，img 标签是否缺少 alt 属性，可辨别的元素命名等等。这一项我们不展开讲，但是还是建议大家按照审计建议修改一下网页。")]),t._v(" "),e("p",[t._v("其他几项，本文的例子最佳实践评分挺高的，而例子不支持PWA，也不需要考虑SEO，这里就不展开说明了，有对应需求的可以自己详细看看即可。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/kyWPzNqWgYHzbhfgo4HkEQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端性能优化之利用 Chrome Dev Tools 进行页面性能分析"),e("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=s.exports},350:function(t,v,_){t.exports=_.p+"assets/img/31.93c87128.png"}}]);