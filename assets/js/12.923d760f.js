(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{2268:function(t,s,a){"use strict";a.r(s);var n=a(46),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/xiaoxi_hahaha/article/details/110257368",target:"_blank",rel:"noopener noreferrer"}},[t._v("迪杰斯特拉(Dijkstra)算法--看一看"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"深度优先搜索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[t._v("#")]),t._v(" 深度优先搜索")]),t._v(" "),n("p",[n("strong",[t._v("DFS解决什么问题")])]),t._v(" "),n("p",[t._v("DFS解决的是连通性的问题，即给定一个起始点(或某种起始状态)和一个终点(或某种最终状态)，判断是否有一条路径能从起点连接到终点")]),t._v(" "),n("p",[t._v("很多情况下，连通的路径有很多条，只需要找出一条即可，DFS只关心路径存在与否，不在乎其长短")]),t._v(" "),n("p",[n("strong",[t._v("算法思想")])]),t._v(" "),n("p",[t._v("从起点出发，选择一个可选方向不断向前，直到无法继续位置")]),t._v(" "),n("p",[t._v("然后尝试另外一种方向，知道最后走到终点")]),t._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("p",[t._v("假设我们有这么一个图，里面有A,B,C,D,E,F,G,H 8个定点，点与点之间联系如下图所示")]),t._v(" "),n("p",[n("img",{attrs:{src:a(716),alt:"dfs"}})]),t._v(" "),n("p",[n("strong",[t._v("如何对这个图进行深度优先的遍历呢？")])]),t._v(" "),n("ol",[n("li",[t._v("深度有点必须依赖栈(Stack)这个数据结构")]),t._v(" "),n("li",[t._v("栈的特点是后进先出(LIFO)")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(717),alt:"dfs"}})]),t._v(" "),n("p",[t._v("到G如果相连的节点都访问了 弹出")]),t._v(" "),n("p",[n("img",{attrs:{src:a(718),alt:"dfs"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(719),alt:"dfs"}}),t._v(" "),n("img",{attrs:{src:a(720),alt:"dfs"}}),t._v(" "),n("img",{attrs:{src:a(721),alt:"dfs"}}),t._v("\n直到栈里没有了~")]),t._v(" "),n("h3",{attrs:{id:"demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" demo")]),t._v(" "),n("p",[n("img",{attrs:{src:a(722),alt:"dfs"}})]),t._v(" "),n("p",[t._v("有两套路径 只许判断能否低达\n"),n("img",{attrs:{src:a(723),alt:"dfs"}})]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// step1:判断是否抵达了目的地B，是则立即返回")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// step2： 标记当前点已经被访问过了")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// step3: 在规定的四个方向上进行尝试")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// step4: 如果有一条路径找到了，则返回true")]),t._v("\nboolean "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dfs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int maze"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" int x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" int y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n    maze"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问过的直接设置-1 工作不推荐，直接修改输入可能对其他地方造成影响")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSafe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maze"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dfs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maze"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否已经越界  是否已经尝试过")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有返回false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[n("p",[t._v("dfs的递归实现")]),t._v(" "),n("p",[t._v("利用递归去实现DFS可以让代码看上去很简洁")]),t._v(" "),n("p",[t._v("递归的时候需要将当前程序中的变量以及状态也入到系统栈里")]),t._v(" "),n("p",[t._v("压入和弹出都需要较多的时候，如果需要压入很深的栈，会造成效率低下")])]),t._v(" "),n("li",[n("p",[t._v("DFS的非递归实现")]),t._v(" "),n("p",[t._v("栈的数据结构也支持压入和弹出操作")]),t._v(" "),n("p",[t._v("完全可以利用栈来提高效率")])])]),t._v(" "),n("blockquote",[n("p",[t._v("非递归实现\n"),n("img",{attrs:{src:a(724),alt:"dfs"}})])]),t._v(" "),n("h3",{attrs:{id:"如何在迷宫中寻找最短路径dfs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何在迷宫中寻找最短路径dfs"}},[t._v("#")]),t._v(" 如何在迷宫中寻找最短路径dfs")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("暴力解题法")]),t._v(" "),n("p",[t._v("找出所有路径，然后比较他们的长短，找出最短的那个;如果硬要使用DFS去找最短的路径，我们必须尝试所有的可能，dfs解决只是连通性的问题，不是用来求解最短路径问题")])]),t._v(" "),n("li",[n("p",[t._v("优化解题思路")]),t._v(" "),n("p",[t._v("一遍寻找目的地，一边记录它和起始点的距离(也就是步数)；当发现从某个方面过来所需要的步数更少，则更新到这个点的步数；如果发现步数更多，则不在继续尝试")])])]),t._v(" "),n("p",[n("strong",[t._v("情况一：从某个方面到达该店所需要的步数更少则更新")]),t._v(" "),n("img",{attrs:{src:a(725),alt:"dfs"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(726),alt:"dfs"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(727),alt:"dfs"}})]),t._v(" "),n("p",[n("strong",[t._v("情况二：从各个方向达到该店所需要的步数都更多则不再尝试")]),t._v(" "),n("img",{attrs:{src:a(728),alt:"dfs"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(729),alt:"dfs"}}),t._v(" "),n("img",{attrs:{src:a(730),alt:"dfs"}}),t._v(" "),n("img",{attrs:{src:a(731),alt:"dfs"}})]),t._v(" "),n("h2",{attrs:{id:"广度优先搜索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[t._v("#")]),t._v(" 广度优先搜索")]),t._v(" "),n("p",[n("strong",[t._v("广度优先搜索简称BFS")])]),t._v(" "),n("p",[t._v("广度优先搜索一般用来解决最短路径的问题")]),t._v(" "),n("p",[t._v("广度优先的搜索是从起始点触发，一层一层的进行")]),t._v(" "),n("p",[t._v("每层当中的点距离起始点的步数都是相同的")]),t._v(" "),n("p",[n("strong",[t._v("双端BFS")])]),t._v(" "),n("p",[t._v("同时从起始点和终点开始进行的广度优先的搜索成为双端BFS；双端BFS可以大大提高搜索效率")]),t._v(" "),n("blockquote",[n("p",[t._v("例如：想判断社交应用程序中两个人之间需要经过多少个朋友的介绍才能互相认识")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(732),alt:"dfs"}})]),t._v(" "),n("p",[t._v("orange为标记为访问过\n"),n("img",{attrs:{src:a(733),alt:"dfs"}}),t._v(" "),n("img",{attrs:{src:a(734),alt:"dfs"}})]),t._v(" "),n("h3",{attrs:{id:"如何在迷宫中寻找最短路径bfs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何在迷宫中寻找最短路径bfs"}},[t._v("#")]),t._v(" 如何在迷宫中寻找最短路径bfs")]),t._v(" "),n("h2",{attrs:{id:"资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.youtube.com/watch?v=7G950ChRevA&list=PLFOgdf0iZ6uskTJam3P2BZwpdAGGG0e24&index=6",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 第05讲：深度与广度优先搜索"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.bilibili.com/video/BV1VV411S7uv?p=142",target:"_blank",rel:"noopener noreferrer"}},[t._v("2020版数据结构与算法"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports},716:function(t,s,a){t.exports=a.p+"assets/img/50.7d1ad268.jpg"},717:function(t,s,a){t.exports=a.p+"assets/img/51.2920a86f.jpg"},718:function(t,s,a){t.exports=a.p+"assets/img/52.45619494.jpg"},719:function(t,s,a){t.exports=a.p+"assets/img/53.975b9e23.jpg"},720:function(t,s,a){t.exports=a.p+"assets/img/54.1da8353d.jpg"},721:function(t,s,a){t.exports=a.p+"assets/img/55.c4322af1.jpg"},722:function(t,s,a){t.exports=a.p+"assets/img/56.15bc74ee.jpg"},723:function(t,s,a){t.exports=a.p+"assets/img/57.f33a60f7.jpg"},724:function(t,s,a){t.exports=a.p+"assets/img/58.9aca6195.jpg"},725:function(t,s,a){t.exports=a.p+"assets/img/59.bda1e074.jpg"},726:function(t,s,a){t.exports=a.p+"assets/img/60.11f2694c.jpg"},727:function(t,s,a){t.exports=a.p+"assets/img/61.7c7ccf4a.jpg"},728:function(t,s,a){t.exports=a.p+"assets/img/62.aa9f7946.jpg"},729:function(t,s,a){t.exports=a.p+"assets/img/63.d7207811.jpg"},730:function(t,s,a){t.exports=a.p+"assets/img/64.6090b8c7.jpg"},731:function(t,s,a){t.exports=a.p+"assets/img/65.80f50b6a.jpg"},732:function(t,s,a){t.exports=a.p+"assets/img/66.1bfb6c03.jpg"},733:function(t,s,a){t.exports=a.p+"assets/img/67.c7e7e217.jpg"},734:function(t,s,a){t.exports=a.p+"assets/img/68.e3de4198.jpg"}}]);