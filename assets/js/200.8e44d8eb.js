(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{2209:function(e,t,n){"use strict";n.r(t);var r=n(46),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("Koa作为下一代Web开发框架，不仅让我体验到了async/await语法带来的同步方式书写异步代码的酸爽，而且本身简洁的特点，更加利于开发者结合业务本身进行扩展")])]),e._v(" "),r("p",[e._v("本文从以下几个方面解读Koa源码")]),e._v(" "),r("ul",[r("li",[e._v("封装创建应用程序函数")]),e._v(" "),r("li",[e._v("扩展res和req")]),e._v(" "),r("li",[e._v("中间件实现原理")]),e._v(" "),r("li",[e._v("异常处理")])]),e._v(" "),r("h2",{attrs:{id:"封装创建应用程序函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#封装创建应用程序函数"}},[e._v("#")]),e._v(" 封装创建应用程序函数")]),e._v(" "),r("p",[e._v("利用NodeJS可以很容易编写一个简单的应用程序")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const http = require('http');\nconst server = http.createServer((req, res) => {\n  // 每一次请求处理的方法\n  console.log(req.url);\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello NodeJS');\n})\nserver.listen(8080)\n")])])]),r("blockquote",[r("p",[e._v("注意：当浏览器发送请求时，会附带请求/favicon.ico")])]),e._v(" "),r("p",[e._v("而Koa在封装创建应用程序的方法中主要执行了以下流程")]),e._v(" "),r("ul",[r("li",[e._v("组织中间件(监听请求之前)")]),e._v(" "),r("li",[e._v("生成context上下文对象")]),e._v(" "),r("li",[e._v("执行中间件")]),e._v(" "),r("li",[e._v("执行默认响应方法或者异常处理方法")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// application.js\nlisten(...args) {\n  const server = http.createServer(this.callback());\n  return server.listen(...args);\n}\n\ncallback() {\n  // 组织中间件\n  const fn = compose(this.middleware);\n\n  // 未监听异常处理，则采用默认的异常处理方法\n  if(!this.listenerCount('error')) this.on('error', this.onerror);\n\n  const handleRequest = (req, res) => {\n    // 生成context上下文对象\n    const ctx = this.createContext(req, res);\n    return this.handleRequest(ctx, fn);\n  }\n  return handleRequest;\n}\n\nhandleRequest(ctx, fnMiddleware) {\n  const res = ctx.res;\n  // 默认状态码为404\n  res.statusCode = 404;\n  // 中间件执行完毕之后 采用默认的错误与成功的处理方式\n  const onerror = err => ctx.onerror(err);\n  const handleResponse = () => respond(ctx);\n  onFinished(res, onerror);\n  return fnMiddleware(ctx).then(handleResponse).catch(onerror)\n}\n")])])]),r("h2",{attrs:{id:"扩展res和req"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展res和req"}},[e._v("#")]),e._v(" 扩展res和req")]),e._v(" "),r("p",[e._v("首先我们要知道NodeJS中res和req是http.IncomingMessage和http.ServerResponse的实例，那么我们就可以在NodeJS中这样扩展req和res:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Object.defineProperties(http.IncomingMessage.prototype, {\n  query: {\n    get() {\n      return querystring.parse(url.parse(this.url).query);\n    }\n  }\n})\n\nObject.defineProperties(http.ServerResponse.prototype, {\n  json: {\n    value: function(obj) {\n      if (typeof obj === 'object') {\n        obj = JSON.stringify(obj);\n      }\n      this.end(obj)\n    }\n  }\n})\n")])])]),r("p",[e._v("而Koa中则是自定义request和response对象,然后保持对res和req的引用，最后通过getter和setter方法实现扩展")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// application.js\ncreateContext((req, res) {\n  const context = Object.create(this.context);\n  const request = context.request = Object.create(this.request);\n  const response = context.response = Object.create(this.response);\n  context.app = request.app = response.app = this;\n  context.req = request.req = response.req = req; // 保存原生req对象\n  context.res = request.res = response.res = res; // 保存原生res对象\n  request.ctx = response.ctx = context;\n  request.response = response;\n  response.request = request;\n  context.originalUrl = request.originalUrl = req.url;\n  context.state = {};\n  // 最终返回完整的context上下文对象\n  return context;\n})\n")])])]),r("p",[e._v("所以Koa中要区别这两组对象")]),e._v(" "),r("ul",[r("li",[e._v("request、response：Koa扩展的对象")]),e._v(" "),r("li",[e._v("res、req:Node原生对象")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// request.js\nget header() {\n  return this.req.headers;\n},\nset header() {\n  this.req.headers = val;\n}\n")])])]),r("p",[e._v("此时已经可以采用这样的方式访问header属性")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("ctx.request.header\n")])])]),r("p",[e._v("但是为了方便开发者调用这些属性和方法,Koa将response和request中的属性和方法代理到context上。")]),e._v(" "),r("p",[e._v("通过Object.defineProperty可以轻松的实现属性的代理")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function access(proto, target, name) {\n  Object.defineProperty(proto, name, {\n    get() {\n      return target[name];\n    }\n    set (value) {\n      target[name] = value;\n    }\n  })\n}\naccess(context, request, 'header');\n")])])]),r("p",[e._v("而对于方法的代理，则需要注意this的指向")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function method(proto, target, name) {\n  proto[name] = function() {\n    return target[name].apply(target, arguments);\n  }\n}\n")])])]),r("p",[e._v("上述就是"),r("strong",[e._v("属性代理和方法代理")]),e._v("的核心代码，这基本算是一个常用的套路")]),e._v(" "),r("p",[e._v("代理这部分详细的源码，可以查看"),r("a",{attrs:{href:"https://github.com/tj/node-delegates/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("node-delegates"),r("OutboundLink")],1),e._v(",不过这个包时间久远,有一些老方法已经废除")]),e._v(" "),r("p",[e._v("在上述过程中的源码中涉及到很多JavaScript的基础知识，例如：原型继承、this指向。")]),e._v(" "),r("h2",{attrs:{id:"中间件实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中间件实现原理"}},[e._v("#")]),e._v(" 中间件实现原理")]),e._v(" "),r("p",[e._v("首先需要明确的是：中间件并不是NodeJS中的概念，它只是connect、express和koa框架衍生的概念")]),e._v(" "),r("h3",{attrs:{id:"connect中间件设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connect中间件设计"}},[e._v("#")]),e._v(" connect中间件设计")]),e._v(" "),r("p",[e._v("在connect中，开发者可以通过use方法注册中间件")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function use(route, fn) {\n  var handle = fn;\n  var path = route;\n\n  // 不传入route则默认为'/'，这种基本是框架处理参数的一种套路\n  if(typeof route !== 'string') {\n    handle = route;\n    path = '/'\n  }\n\n  // ...\n  // 存储中间件\n  this.stack.push({ route: path, handle: handle })\n\n  // 以便链式调用\n  return this;\n}\n")])])]),r("p",[e._v("use方法内部获取到中间件的路由信息(默认为'/')和中间件的处理函数之后，构建成layer对象，然后将其存储在一个队列当中，也就是上述代码中的stack。")]),e._v(" "),r("p",[e._v("connect中间件的执行流程主要由handle与call函数决定")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function handle(req, res, out) {\n  var index = 0;\n  var stack = this.stack;\n  ...\n  function next(err) {\n    ...\n    // 依次取出中间件\n    var layer = stack[index++];\n\n    // 终止条件\n    if(!layer) {\n      defer(done, err);\n      return;\n    }\n\n    // 路由匹配规则\n    if(path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    }\n    ...\n    call(layer.handle, route, err, req, res, next);\n  }\n\n  next();\n}\n")])])]),r("p",[e._v("handle函数中使用闭包函数next来检测layer是否与当前你路由相匹配，匹配则执行该layer上的中间件函数，否则继续检查下一个layer")]),e._v(" "),r("p",[e._v("这里需要注意next中检查路由的方式可能与想象中的不太一样，所以默认路由为'/'的中间件会在每一次请求处理中都执行。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n\n  try {\n    if (hasError && arity === 4) {\n      // 错误处理中间件\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // 请求处理中间件\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // 记录错误\n    error = e;\n  }\n\n  // 将错误传递下去\n  next(error);\n}\n")])])]),r("p",[e._v("在通过call方法执行中间件方法的时候，采用try/catch捕获错误，这里有个特别需要注意的地方是，call内部会根据是否存在错误以及中间件函数的参数决定是否执行错误处理中间件。并且一旦捕获到错误，next方法会将错误传递下去，所以接下来普通的请求处理中间件即使通过了next中的路由匹配，仍然会被call方法给过滤掉")]),e._v(" "),r("p",[e._v("下面是layer的处理流程图\n"),r("img",{attrs:{src:n(547),alt:"layer处理流程图"}})]),e._v(" "),r("p",[e._v("上述就是connect中间件涉及的核心要点，总结起来有如下几点")]),e._v(" "),r("ol",[r("li",[e._v("通过use方法注册中间件")]),e._v(" "),r("li",[e._v("中间件的顺序执行是通过next方法衔接的并且需要手动调用，在next中会进行路由匹配，从而过滤掉部分中间件")]),e._v(" "),r("li",[e._v("当中间件的执行过程中发生异常，则next会携带异常过滤掉非错误处理中间件，也是为什么错误中间件会比其他中间件多一个error参数")]),e._v(" "),r("li",[e._v("在请求处理的周期中，需要手动调用res.end()来结束响应")])]),e._v(" "),r("h3",{attrs:{id:"koa中间件设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#koa中间件设计"}},[e._v("#")]),e._v(" Koa中间件设计")]),e._v(" "),r("p",[e._v("Koa中间件与connect中间件的设计有很大的差异")]),e._v(" "),r("ul",[r("li",[e._v("Koa中间件的执行并不需要匹配路由，所以注册的中间件每一次请求都会执行(当然还需要手动调用next)")]),e._v(" "),r("li",[e._v("Koa中通过继承event,暴露error时间让开发者自定义异常处理")]),e._v(" "),r("li",[e._v("Koa中res.end由中间件执行完成之后自动调用，这样避免在connect忘记调用res.end导致用户得不到反馈")]),e._v(" "),r("li",[e._v("Koa中采用了async/await语法让开发者利用同步的方式编写异步代码")])]),e._v(" "),r("p",[e._v("当然Koa中也是采用use方法注册中间件，相比较connect省去路由匹配的处理，就显的很简洁")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("use(fn) {\n  this.middleware.push(fn);\n  return this;\n}\n")])])]),r("p",[e._v("并且use支持链式调用")]),e._v(" "),r("p",[e._v("Koa中间件的执行流程主要通过koa-compose中的compose函数完成")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function compose(middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array');\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n  * @param {Object} context\n  * @return {Promise}\n  * @api public\n  */\n\n  return function(context, next) {\n    let index = -1;\n    return dispatch(0);\n    return dispatch(i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return Promise.resolve();\n      try {\n        // 递归调用下一个中间件\n        return Promise.resovle(fn(context, dispatch.bind(null, i + 1)))\n      } catch(err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n")])])]),r("p",[e._v("看到这里本质上connect和koa实现中间件的思想都是递归，不难看出koa相比较connect实现的更加简介，主要原因在于")]),e._v(" "),r("ul",[r("li",[e._v("connect中提供路由匹配功能，而Koa中则是相当于connect中默认的'/'路径")]),e._v(" "),r("li",[e._v("connect在捕获中间件的异常时，通过next携带error一个个中间件验证，直到错误处理中间件。而Koa中则是用Promise包装中间件，一旦中间件发生异常，那么会直接触发reject状态，直接在Promise的catch中处理就行")])]),e._v(" "),r("p",[e._v("上述就是connect中间件与Koa中间件的实现原理，现在在看Koa中间件的这张执行流程图，应该没什么疑问了吧")]),e._v(" "),r("p",[r("img",{attrs:{src:n(548),alt:"koa中间件的执行流程图"}})]),e._v(" "),r("h2",{attrs:{id:"异常处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[e._v("#")]),e._v(" 异常处理")]),e._v(" "),r("p",[e._v("对于同步代码，通过try/catch可以轻松捕获异常,在connect中间件的异常捕获则是通过try/catch完成。")]),e._v(" "),r("p",[e._v("对于异步代码，try/catch则无法捕获，这时候一般可以构造Promise链，在最后的catch方法中捕获错误，Koa就是这样处理，并且在catch方法中发送error事件，以便开发者自定义异常处逻辑")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("this.app.emit('error', err, this);\n")])])]),r("p",[e._v("前面也谈到Koa利用async/await语法带来同步方式书写异步代码的酸爽，另外也让错误处理更加自然")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 也可以这样自定义错误处理\napp.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch(err) {\n    ctx.status = err.status || 500;\n    ctx.body = err;\n  }\n})\n")])])]),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("相信看到这里，再回忆一下之前遇到的那些问题，你应该会有新的理解，并且再次使用Koa时会更加得心应手，这也是分析Koa源码的目的之一。")]),e._v(" "),r("h2",{attrs:{id:"资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[e._v("#")]),e._v(" 资料")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.imooc.com/article/274031",target:"_blank",rel:"noopener noreferrer"}},[e._v("玩转Koa -- 核心原理分析"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports},547:function(e,t,n){e.exports=n.p+"assets/img/5c3dfbed0001256608600785.25668a33.jpeg"},548:function(e,t,n){e.exports=n.p+"assets/img/5c3dfc1a0001b35302950106.b353e7e4.jpeg"}}]);