(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{1586:function(t,r,a){t.exports=a.p+"assets/img/1e25d0f1fd0cf6a56b7b07c756c2112b.66e8325b.png"},2695:function(t,r,a){"use strict";a.r(r);var e=a(46),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"概念介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念介绍"}},[t._v("#")]),t._v(" 概念介绍")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("multirepo")]),t._v(" "),e("p",[t._v("一个项目，建立一个单独的代码仓库管理，单独开发，单独发布部署，这种方式称之为multirepo")])]),t._v(" "),e("li",[e("p",[t._v("monorepo")]),t._v(" "),e("p",[t._v("反过来，把多个项目放到同一个代码仓库管理，就称之为monorepo。包括vue3、babel、react在内的众多国内外著名项目都采用了这种方式")])])]),t._v(" "),e("p",[t._v("由以上的解释就明白了monorepo和multirepo就是两种不同的代码组织管理方式，分别对应着“合”和“分”两种设计哲学")]),t._v(" "),e("h2",{attrs:{id:"对比优劣"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比优劣"}},[t._v("#")]),t._v(" 对比优劣")]),t._v(" "),e("p",[e("img",{attrs:{src:a(1586),alt:"对比优劣"}})]),t._v(" "),e("p",[t._v("在笔者之前的前端项目中，基本上都采用了multirepo的管理方式，但一旦在开发一些依赖关系比较密切的项目的时候，深感调试超级麻烦，因此笔者结合着自己的项目，参考业界流行的vue3项目，总结了一套monorepo开发架构的搭建流程，记录下来")]),t._v(" "),e("h2",{attrs:{id:"使用工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用工具"}},[t._v("#")]),t._v(" 使用工具")]),t._v(" "),e("p",[t._v("核心思路就是采用yarn包管理工具及它的workspace功能。加上lerna工具来配套使用")]),t._v(" "),e("h2",{attrs:{id:"搭建流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搭建流程"}},[t._v("#")]),t._v(" 搭建流程")]),t._v(" "),e("h2",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/407446481",target:"_blank",rel:"noopener noreferrer"}},[t._v("monorepo工程架构搭建总结"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);