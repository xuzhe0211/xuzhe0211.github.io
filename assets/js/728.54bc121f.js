(window.webpackJsonp=window.webpackJsonp||[]).push([[728],{2832:function(e,t,a){"use strict";a.r(t);var s=a(46),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("useMemo")]),e._v(" "),a("p",[e._v("memo类似于PureComponent作用是优化组件性能，防止组件触发重渲染")]),e._v(" "),a("p",[a("span",{staticStyle:{color:"red"}},[e._v("memo与PureComponent比较类似，前者是对Function Component的优化，后者是对Class Component的优化，都会对传入组件的数据进行浅比较，useCallback则会保证handleClick2不会发生变化")])]),e._v(" "),a("p",[e._v("memo针对一个组件的渲染是否重复执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<Foo />\n")])])]),a("p",[e._v("usememo针对一段函数逻辑是否重复执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("() => {}\n")])])]),a("p",[e._v("useEffect是在渲染之后完成的")]),e._v(" "),a("p",[a("span",{staticStyle:{color:"red"}},[e._v("useMemo是在渲染期间完成的--避免无用方法的调用")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("useMemo(() => [])\n")])])]),a("p",[e._v("参数如果是空数组的话就会执行一次")]),e._v(" "),a("p",[e._v("useCallback")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("useMemo(() => {fn}) 等价于useCallback(fn)\n")])])]),a("h2",{attrs:{id:"usecallback-减少render次数、减少计算量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecallback-减少render次数、减少计算量"}},[e._v("#")]),e._v(" useCallback(减少render次数、减少计算量)")]),e._v(" "),a("p",[e._v("有人可能误认为useCallback可以用来解决创建函数造成的性能问题，其实恰恰相反。单个组件来看，useCallback只会更慢，因为inline函数是无论如何都会创建的，还会增加useCallback内部对inputs变化的检测")]),e._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("cb")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 创建了")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" cb "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("userCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 还是创建了")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("useCallback的真正目的是在于缓存每次渲染时inline caallback的实例，这样方便配合上子组件shouldComponentUpdate或者React.memo起到减少不必要的渲染的作用。需要注意的是React.memo和React.useCallback一定要配对使用。缺了一个可能导致性能不升反降。毕竟无意义的浅比较也是消耗那么一点点性能。")]),e._v(" "),a("p",[e._v("返回一个memoized的回调函数，即返回一个函数的句柄，等同于函数的变量，因此useCallback的作用在于利用memoize减少无效的re-render,达到性能优化的作用")]),e._v(" "),a("h2",{attrs:{id:"usememo-使用usememo方法-避免无用方法的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo-使用usememo方法-避免无用方法的调用"}},[e._v("#")]),e._v(" useMemo(使用useMemo方法 避免无用方法的调用)")]),e._v(" "),a("p",[e._v("useMemo是拿来保持一个对象引用不变的。useMemo和useCallback都是React提供做性能优化的，比起classes，Hooks给了开发者更高的灵活度和自由，但是对开发者要求也搞了，因为hooks使用不恰当很容易导致性能问题")]),e._v(" "),a("p",[e._v("返回一个memoized值，useMemo函数每当deps发生变化的时候都会调用computeExpensiveValue内容，这是与useCallbacke最大的不同，useCallback不执行dosomething的内容，只是重新刷新函数句柄")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("句柄\n官方上有这样一个等式：useCallback(fn, deps)相当于useMemo(() => fn, deps)。就是deps发生变化时候，useCallback返回一个可执行的fn的句柄，而useMemo则是执行() => fn，但是因为返回的是fn函数，因此当调用这种时，其实执行的是相同的fn函数的内容")])]),e._v(" "),a("h2",{attrs:{id:"usememo和usecallback的认识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo和usecallback的认识"}},[e._v("#")]),e._v(" useMemo和useCallback的认识")]),e._v(" "),a("ul",[a("li",[e._v("useMemo和useCallback都是是具有缓存作用的，只是它们缓存对象不一样，一个是属性，一个是缓存函数，特点都是，当缓存依赖的没变，去获取还是获取曾经的缓存")]),e._v(" "),a("li",[e._v("useMemo是对函数组件的属性包装，返回一个具有缓存效果的新的属性，当依赖的属性没有变化的时候，这个返回新属性就会从缓存中获取之前的")]),e._v(" "),a("li",[e._v("useCallback是对函数组件中的方法缓存，返回一个被缓存的方法")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.51cto.com/u_3409716/2904210",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[e._v("#")]),e._v(" 资料")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/jdrunk/article/details/114824546",target:"_blank",rel:"noopener noreferrer"}},[e._v("useMemo的使用方式"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/sk-3/p/13808854.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("实例--react useCallback的常规使用方式?"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/lgwebdream/FE-Interview/issues/1218",target:"_blank",rel:"noopener noreferrer"}},[e._v("说下 React 的 useEffect、useCallback、useMemo "),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/339438975",target:"_blank",rel:"noopener noreferrer"}},[e._v("React.memo和useMemo"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/f533a9d7645c",target:"_blank",rel:"noopener noreferrer"}},[e._v("React获取子组件DOM"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/wujunlei1595848/article/details/90437634",target:"_blank",rel:"noopener noreferrer"}},[e._v("react usememo useEffect"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);