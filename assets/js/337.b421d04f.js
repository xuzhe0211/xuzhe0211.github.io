(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{1552:function(e,s,a){e.exports=a.p+"assets/img/5cffb5222d1a8.dbfacc9a.jpeg"},2661:function(e,s,a){"use strict";a.r(s);var r=a(46),t=Object(r.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"browser-vs-module-vs-main"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#browser-vs-module-vs-main"}},[e._v("#")]),e._v(" browser VS module VS main")]),e._v(" "),r("p",[e._v("前端开发中使用到npm包那可算是家常便饭，而使用到npm包总免不了接触到package.json包配置文件。那么这里就有一个问题，当我们在不同环境下import一个npm包时，到底加载的是npm包的哪个文件？老司机很快的给出答案："),r("strong",[e._v("main字段中指定的文件")])]),e._v(" "),r("p",[e._v("然后我们清楚npm包其实又分为：")]),e._v(" "),r("ul",[r("li",[e._v("只允许在客户端使用的")]),e._v(" "),r("li",[e._v("只允许服务端使用的")]),e._v(" "),r("li",[e._v("浏览器/服务端都可以使用\n如果我们需要开发一个npm包同时兼容支持web端和server端，"),r("strong",[e._v("需要在不同环境下加载npm包的入口文件")]),e._v("，显然一个main字段已经不能满足我们的需求")])]),e._v(" "),r("p",[e._v("本文就来说下这几个字段的使用场景，以及同时同在这几个字段时候，他们的优先级")]),e._v(" "),r("h2",{attrs:{id:"文件优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件优先级"}},[e._v("#")]),e._v(" 文件优先级")]),e._v(" "),r("p",[e._v("在说package.json之前，先说下文件优先级")]),e._v(" "),r("p",[e._v("由于我们使用的模块规范有ESM和commonJS两种，为了能在node环境下原生执行ESM规范的脚本文件，.mjs文件就应运而生。")]),e._v(" "),r("p",[r("span",{staticStyle:{color:"blue"}},[e._v("当存在index.mjs和index.js这种同名不同后缀的文件时，import './index'或者require('./index')是会优先加载index.mjs文件的")])]),e._v(" "),r("p",[r("span",{staticStyle:{color:"blue"}},[e._v("也就是:"),r("strong",[e._v("优先级mjs > js")])])]),e._v(" "),r("h2",{attrs:{id:"browser-module和main字段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#browser-module和main字段"}},[e._v("#")]),e._v(" browser, module和main字段")]),e._v(" "),r("h3",{attrs:{id:"字段定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字段定义"}},[e._v("#")]),e._v(" 字段定义")]),e._v(" "),r("ul",[r("li",[e._v("main：定义了npm包的入口文件，browser环境和node环境均可使用")]),e._v(" "),r("li",[e._v("module:定义npm包的ESM规范的入口文件，browser和node环境均可使用")]),e._v(" "),r("li",[e._v("browser:定义npm包在browser环境下的入口文件")])]),e._v(" "),r("h3",{attrs:{id:"使用场景与优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用场景与优先级"}},[e._v("#")]),e._v(" 使用场景与优先级")]),e._v(" "),r("p",[e._v("首先，我们假定npm包test有一下目录结构")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("----- lib\n   |-- index.browser.js\n   |-- index.browser.mjs\n   |-- index.js\n   |-- index.mjs\n")])])]),r("p",[e._v("其中*.js是使用commonJS规范的语法(require('xxxx')), *.mjs是用ESM规范的语法(import 'xxx')")]),e._v(" "),r("p",[e._v("其中package.json文件")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('"main": "lib/index.js", // main\n"module": "lib/index.mjs", // module\n\n// browser 可定义成和 main/module 字段一一对应的映射对象，也可以直接定义为字符串\n"browser": {\n  "./lib/index.js": "./lib/index.browser.js", // browser+cjs\n  "./lib/index.mjs": "./lib/index.browser.mjs"  // browser+mjs\n},\n\n// "browser": "./lib/index.browser.js" // browser\n')])])]),r("p",[e._v("根据以上配置，那么其实我们的package.json指定的入口可以有")]),e._v(" "),r("ul",[r("li",[e._v("main")]),e._v(" "),r("li",[e._v("module")]),e._v(" "),r("li",[e._v("browser")]),e._v(" "),r("li",[e._v("browser + cjs")]),e._v(" "),r("li",[e._v("browser + mjs")])]),e._v(" "),r("p",[e._v("这5种情况。下面说下具体使用场景")]),e._v(" "),r("h3",{attrs:{id:"webpack-web-esm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-web-esm"}},[e._v("#")]),e._v(" webpack + web + ESM")]),e._v(" "),r("p",[e._v("这是我们最常见的使用模型，通过webpack打包构建我们的web应用，模块语法使用ESM")]),e._v(" "),r("p",[e._v("当我们加载")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import test from 'test'\n")])])]),r("p",[e._v("实际上的加载优先级是"),r("strong",[e._v("browser = browser + mjs > module > browser + cjs > main")])]),e._v(" "),r("p",[e._v("也就是说webpack会根据这个顺序会寻找字段指定的文件，知道找到为止。")]),e._v(" "),r("p",[e._v("然而实际上的情况能比这个更加复杂。具体可以参考流程图")]),e._v(" "),r("p",[r("img",{attrs:{src:a(1552),alt:"流程图"}})]),e._v(" "),r("h3",{attrs:{id:"webpack-web-commonjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-web-commonjs"}},[e._v("#")]),e._v(" webpack + web + commonJS")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const test = require('test')\n")])])]),r("p",[e._v("事实上，构建web应用时，使用ESM或者commonJS模块规范对于加载优先级没有任何影响")]),e._v(" "),r("p",[e._v("优先级依然是 "),r("strong",[e._v("browser = browser+mjs > module > browser+cjs > main")])]),e._v(" "),r("h3",{attrs:{id:"webpack-node-esm-commonjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-node-esm-commonjs"}},[e._v("#")]),e._v(" webpack + node + ESM/commonJS")]),e._v(" "),r("p",[e._v("我们清楚，使用webpack构建项目的时，有一个target选项，默认为web，即进行web应用构建")]),e._v(" "),r("p",[e._v("当我们需要进行一些同构项目，或者其他node项目构建的时，我们需要将webpack.config.js的target选项设置为node进行构建")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import test from 'test'\n// 或者 const test = require('test')\n")])])]),r("p",[r("strong",[e._v("优先级是module > main")])]),e._v(" "),r("h3",{attrs:{id:"node-commonjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-commonjs"}},[e._v("#")]),e._v(" node + commonJS")]),e._v(" "),r("p",[e._v("通过node test.js直接执行脚本")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const test = require('test')\n")])])]),r("p",[r("strong",[e._v("只有main字段有效")])]),e._v(" "),r("h3",{attrs:{id:"node-esm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-esm"}},[e._v("#")]),e._v(" node + ESM")]),e._v(" "),r("p",[e._v("通过 --experimental-modules 可以让 node 执行 ESM 规范的脚本(必须是 mjs 文件后缀)\n`node --experimental-modules test.mjs")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import test from 'test'\n")])])]),r("p",[r("strong",[e._v("只有mian字段有效")])]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("ul",[r("li",[e._v("如果npm包导出的是ESM规范的包，使用module")]),e._v(" "),r("li",[e._v("如果 npm 包只在 web 端使用，并且严禁在 server 端使用，使用 browser。")]),e._v(" "),r("li",[e._v("如果 npm 包只在 server 端使用，使用 main")]),e._v(" "),r("li",[e._v("如果 npm 包在 web 端和 server 端都允许使用，使用 browser 和 main")]),e._v(" "),r("li",[e._v("其他更加复杂的情况，如npm 包需要提供 commonJS 与 ESM 等多个规范的多个代码文件，请参考上述使用场景或流程图")])]),e._v(" "),r("h2",{attrs:{id:"资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[e._v("#")]),e._v(" 资料")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/qianxiaox/p/14041717.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("package.json中browser,module, main字段优先级"),r("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=t.exports}}]);